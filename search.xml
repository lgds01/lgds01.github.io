<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>玩转OpenWrt系列——docker中安装并配置旁路由</title>
      <link href="/wan-zhuan-openwrt-xi-lie-docker-zhong-an-zhuang-bing-pei-zhi-pang-lu-you/2022/06/26/"/>
      <url>/wan-zhuan-openwrt-xi-lie-docker-zhong-an-zhuang-bing-pei-zhi-pang-lu-you/2022/06/26/</url>
      
        <content type="html"><![CDATA[<h1 id="玩转-OpenWrt-系列——docker-中安装并配置旁路由"><a href="#玩转-OpenWrt-系列——docker-中安装并配置旁路由" class="headerlink" title="玩转 OpenWrt 系列——docker 中安装并配置旁路由"></a>玩转 OpenWrt 系列——docker 中安装并配置旁路由</h1><p>系统环境为 Raspbian(64bit)，使用 docker 镜像为<a href="https://github.com/SuLingGG/OpenWrt-Docker">SuLingGG&#x2F;OpenWrt-Docker</a></p><p>跟着<a href="https://mlapp.cn/376.html">镜像教程</a>配置即可，里面步骤十分详细。</p><p>我的网络布局参考：<br>路由器：192.168.2.1<br>openwrt：192.168.2.2<br>树莓派：192.168.2.3</p>]]></content>
      
      
      <categories>
          
          <category> openwrt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> raspberry pi </tag>
            
            <tag> openwrt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派安装raspbian64位系统和docker</title>
      <link href="/shu-mei-pai-an-zhuang-raspbian64-wei-xi-tong-he-docker/2022/06/26/"/>
      <url>/shu-mei-pai-an-zhuang-raspbian64-wei-xi-tong-he-docker/2022/06/26/</url>
      
        <content type="html"><![CDATA[<h1 id="树莓派安装-raspbian64-位系统和-docker"><a href="#树莓派安装-raspbian64-位系统和-docker" class="headerlink" title="树莓派安装 raspbian64 位系统和 docker"></a>树莓派安装 raspbian64 位系统和 docker</h1><p>树莓派发布了 64 位的 raspbian 系统，终于不用面对支持 64 位硬件却只能用 32 位官方系统的尴尬情况了，因此赶紧来试试。</p><h2 id="1-下载并烧录镜像"><a href="#1-下载并烧录镜像" class="headerlink" title="1.下载并烧录镜像"></a>1.下载并烧录镜像</h2><p>从<a href="https://www.raspberrypi.com/software/operating-systems/">树莓派官方网站</a>下载 64 位镜像，然后使用烧录软件（例如 balenaEtcher）将镜像烧入 tf 卡中。<br><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/20220626144513.png" alt="20220626144513"></p><h2 id="2-修改配置"><a href="#2-修改配置" class="headerlink" title="2.修改配置"></a>2.修改配置</h2><p>打开烧录完成的盘，进入 boot 目录</p><p>（1）新增 ssh 文件，用以打开默认关闭的 ssh 登录</p><p>（2）新建 wpa_supplicant.conf 文件，配置 wifi 连接，文件内容如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">country</span><span class="token operator">=</span>CN<span class="token assign-left variable">ctrl_interface</span><span class="token operator">=</span>DIR<span class="token operator">=</span>/var/run/wpa_supplicant <span class="token assign-left variable">GROUP</span><span class="token operator">=</span>netdev<span class="token assign-left variable">update_config</span><span class="token operator">=</span><span class="token number">1</span><span class="token assign-left variable">network</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token assign-left variable">ssid</span><span class="token operator">=</span><span class="token string">"WiFi-A"</span><span class="token assign-left variable">psk</span><span class="token operator">=</span><span class="token string">"12345678"</span><span class="token assign-left variable">key_mgmt</span><span class="token operator">=</span>WPA-PSK<span class="token assign-left variable">priority</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token assign-left variable">network</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token assign-left variable">ssid</span><span class="token operator">=</span><span class="token string">"WiFi-B"</span><span class="token assign-left variable">psk</span><span class="token operator">=</span><span class="token string">"12345678"</span><span class="token assign-left variable">key_mgmt</span><span class="token operator">=</span>WPA-PSK<span class="token assign-left variable">priority</span><span class="token operator">=</span><span class="token number">2</span><span class="token assign-left variable">scan_ssid</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中：</p><ul><li>ssid 为 wifi 名字</li><li>psk 是 wifi 密码，如果没有密码，不加这一行</li><li>priority 是连接优先级</li><li>key_mgmt 是使用的加密协议，使用 WEP 加密填 NONE，使用 WPA&#x2F;WPA2 加密填 WPA-PSK（一般都是这个）</li><li>scan_ssid 连接隐藏 WiFi 时需要指定该值为 1</li></ul><p>（3）根据<a href="https://www.raspberrypi.com/news/raspberry-pi-bullseye-update-april-2022/">官网消息</a>，由于树莓派安全策略变更，因此默认不带有 pi 用户，需要连接屏幕新建用户。</p><p>接下来提供一种<strong>不需要连接屏幕新建用户</strong>的方法：</p><p>在 boot 目录中新建 userconf 文件，编辑其内容如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 用户名:加密密码</span><span class="token comment"># 例如用户名为pi，密码为raspberry</span><span class="token comment"># pi:$6$Q7yQqYO94B9fI9jn$trNI8/yvcZ8WYleaYKN5qlrzQ3AhZXLZtcNkYJlSH16xGloh2ZiM4KeAay8GSBoQ09LZI/wMOxM3qeou7uZXq.</span>username:encrypted-password<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>生成加密密码可使用<code>echo &#39;mypassword&#39; | openssl passwd -6 -stdin</code></p><h2 id="3-通过-ssh-连接到树莓派"><a href="#3-通过-ssh-连接到树莓派" class="headerlink" title="3.通过 ssh 连接到树莓派"></a>3.通过 ssh 连接到树莓派</h2><p>通过 ssh 连接需要知道树莓派的 ip 地址，下面有几种方式来连接</p><ol><li><p>登陆路由器后台网站，找到树莓派的 ip 地址，由于我是校园网，这个对我无效</p></li><li><p>用手机或者电脑开热点，将第三步的 wifi 设置设为热点的名字和密码，从而能够从手机或者电脑中获得树莓派 ip 地址</p><p><img src="https://cdn.jsdelivr.net/gh/lgds-01/picture@main/uPic/image-20211117185533736.png" alt="image-20211117185533736"></p></li><li><p>当电脑和树莓派连在同一局域网下，使用<code>arp -a</code>命令能够找到树莓派 ip</p></li></ol><p>找到 ip 后，利用命令<code>ssh username@ip</code>登陆树莓派，username 替换为新建用户用户名。</p><h2 id="4-更新-apt-源"><a href="#4-更新-apt-源" class="headerlink" title="4.更新 apt 源"></a>4.更新 apt 源</h2><p>按照<a href="https://mirrors.tuna.tsinghua.edu.cn/help/raspbian/">清华大学 Raspbian 镜像使用帮助</a>操作即可。</p><h2 id="5-安装-docker"><a href="#5-安装-docker" class="headerlink" title="5.安装 docker"></a>5.安装 docker</h2><p>根据<a href="https://docs.docker.com/engine/install/debian/#install-using-the-convenience-script">docker 官方文档</a>，raspbian 用户不能通过存储按章 docker-engine，因此只能通过脚本安装。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> -fsSL https://get.docker.com -o get-docker.sh<span class="token function">sudo</span> <span class="token function">sh</span> get-docker.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用命令<code>sudo docker -v</code>查看是否安装成功。</p>]]></content>
      
      
      <categories>
          
          <category> raspberry pi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> raspberry pi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MQTT之旅——服务端(EMQX)</title>
      <link href="/mqtt-zhi-lu-fu-wu-duan-emqx/2022/06/25/"/>
      <url>/mqtt-zhi-lu-fu-wu-duan-emqx/2022/06/25/</url>
      
        <content type="html"><![CDATA[<h1 id="MQTT-之旅——服务端-EMQX"><a href="#MQTT-之旅——服务端-EMQX" class="headerlink" title="MQTT 之旅——服务端(EMQX)"></a>MQTT 之旅——服务端(EMQX)</h1><h2 id="EMQX-介绍"><a href="#EMQX-介绍" class="headerlink" title="EMQX 介绍"></a>EMQX 介绍</h2><p>EMQX (Erlang&#x2F;Enterprise&#x2F;Elastic MQTT Broker) 是基于 Erlang&#x2F;OTP 平台开发的开源物联网 MQTT 消息服务器。</p><p>Erlang&#x2F;OTP 是出色的软实时 (Soft-Realtime)、低延时 (Low-Latency)、分布式 (Distributed)的语言平台。</p><p>MQTT 是轻量的 (Lightweight)、发布订阅模式 (PubSub) 的物联网消息协议。</p><p>EMQX 设计目标是实现高可靠，并支持承载海量物联网终端的 MQTT 连接，支持在海量物联网设备间低延时消息路由:</p><ol><li>稳定承载大规模的 MQTT 客户端连接，单服务器节点支持 200 万连接。</li><li>分布式节点集群，快速低延时的消息路由。</li><li>消息服务器内扩展，支持定制多种认证方式、高效存储消息到后端数据库。</li><li>完整物联网协议支持，MQTT、MQTT-SN、CoAP、LwM2M、WebSocket 或私有协议支持。</li></ol><p>以上是<a href="https://www.emqx.io/zh">EMQX 官网</a>的介绍。作为一名普通的 DIY 爱好者，它的以下优点吸引了我：</p><ul><li>开源免费</li><li>有 dashboard 能够快捷的使用图形化界面进行配置</li><li>支持快速的私有化部署</li><li>有完善的权限控制</li><li>开发团队十分活跃，项目不至于有 bug 修很久</li></ul><h2 id="安装流程"><a href="#安装流程" class="headerlink" title="安装流程"></a>安装流程</h2><p>服务器是腾讯云的 ubuntu 20.04LTS 系统<br>参照<a href="https://www.emqx.io/docs/zh/v4.4/getting-started/install.html">官网的安装说明</a>，使用 docker 镜像的方式快速安装，省去配置环境的步骤。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull emqx/emqx:v4.0.0<span class="token function">docker</span> run -d --name emqx -p <span class="token number">1883</span>:1883 -p <span class="token number">8081</span>:8081 -p <span class="token number">8083</span>:8083 -p <span class="token number">8883</span>:8883 -p <span class="token number">8084</span>:8084 -p <span class="token number">18083</span>:18083 emqx/emqx:v4.0.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>端口说明：</p><ul><li>1883 MQTT 协议端口</li><li>8081 HTTP API 端口</li><li>8083,8084 MQTT&#x2F;WebSocket 端口</li><li>18083 Dashboard 管理控制台端口</li><li>8883 MQTT&#x2F;SSL 端口</li></ul><p>PS:<strong>记得去腾讯云控制台放行上述端口</strong></p><p>使用浏览器打开 http:&#x2F;&#x2F;&lt;服务器 ip&gt;:18083，进入 dashboard，在设置中将 language 改为简体中文。</p><p>默认用户名为 admin，密码为 public</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>使用 MQTT 客户端工具，这里使用<a href="https://mqttx.app/zh">MQTTX</a>作为演示。</p><p>首先新建一个连接，填写名称和服务器地址<br><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/20220625012956.png" alt="20220625012956"></p><p>然后订阅一个主题，填写主题名称<br><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/20220625013236.png" alt="20220625013236"></p><p>最后发布一个该主题的消息，接受消息<br><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/20220625013356.png" alt="20220625013356"></p><p>成功订阅主题并发送该主题消息。</p>]]></content>
      
      
      <categories>
          
          <category> experiment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mqtt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python控制Xbox Series X手柄</title>
      <link href="/python-kong-zhi-xbox-series-x-shou-bing/2022/06/13/"/>
      <url>/python-kong-zhi-xbox-series-x-shou-bing/2022/06/13/</url>
      
        <content type="html"><![CDATA[<h1 id="python-控制-Xbox-Series-X-手柄"><a href="#python-控制-Xbox-Series-X-手柄" class="headerlink" title="python 控制 Xbox Series X 手柄"></a>python 控制 Xbox Series X 手柄</h1><p><strong>需要安装 pygame 库,下述键码均只适合 windows 平台的 XboxSeriesX 手柄，针对不同平台不同手柄的键码值需使用调试器确定</strong></p><h2 id="手柄区域说明"><a href="#手柄区域说明" class="headerlink" title="手柄区域说明"></a>手柄区域说明</h2><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202206132053703.png"><br><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202206132051396.png"></p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pygamepygame<span class="token punctuation">.</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># Loop until the user clicks the close button.</span>done <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment"># Initialize the joysticks</span>pygame<span class="token punctuation">.</span>joystick<span class="token punctuation">.</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># -------- Main Program Loop -----------</span><span class="token keyword">while</span> done <span class="token operator">==</span> <span class="token boolean">False</span><span class="token punctuation">:</span>    <span class="token comment"># EVENT PROCESSING STEP</span>    <span class="token keyword">for</span> event <span class="token keyword">in</span> pygame<span class="token punctuation">.</span>event<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># User did something</span>        <span class="token keyword">if</span> event<span class="token punctuation">.</span><span class="token builtin">type</span> <span class="token operator">==</span> pygame<span class="token punctuation">.</span>QUIT<span class="token punctuation">:</span>  <span class="token comment"># If user clicked close</span>            done <span class="token operator">=</span> <span class="token boolean">True</span>  <span class="token comment"># Flag that we are done so we exit this loop</span>    <span class="token comment"># Get count of joysticks</span>    joystick_count <span class="token operator">=</span> pygame<span class="token punctuation">.</span>joystick<span class="token punctuation">.</span>get_count<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># For each joystick:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>joystick_count<span class="token punctuation">)</span><span class="token punctuation">:</span>        joystick <span class="token operator">=</span> pygame<span class="token punctuation">.</span>joystick<span class="token punctuation">.</span>Joystick<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        joystick<span class="token punctuation">.</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># Get the name from the OS for the controller/joystick</span>        name <span class="token operator">=</span> joystick<span class="token punctuation">.</span>get_name<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># Usually axis run in pairs, up/down for one, and left/right for</span>        <span class="token comment"># the other.</span>        axes <span class="token operator">=</span> joystick<span class="token punctuation">.</span>get_numaxes<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>axes<span class="token punctuation">)</span><span class="token punctuation">:</span>            axis <span class="token operator">=</span> joystick<span class="token punctuation">.</span>get_axis<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">and</span> axis <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Left up"</span><span class="token punctuation">,</span> axis<span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">and</span> axis <span class="token operator">></span> <span class="token number">0.3</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Left down"</span><span class="token punctuation">,</span> axis<span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> axis <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Left left"</span><span class="token punctuation">,</span> axis<span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> axis <span class="token operator">></span> <span class="token number">0.3</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Left right"</span><span class="token punctuation">,</span> axis<span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">3</span> <span class="token keyword">and</span> axis <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Right up"</span><span class="token punctuation">,</span> axis<span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">3</span> <span class="token keyword">and</span> axis <span class="token operator">></span> <span class="token number">0.3</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Right down"</span><span class="token punctuation">,</span> axis<span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">2</span> <span class="token keyword">and</span> axis <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Right left"</span><span class="token punctuation">,</span> axis<span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">2</span> <span class="token keyword">and</span> axis <span class="token operator">></span> <span class="token number">0.3</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Right right"</span><span class="token punctuation">,</span> axis<span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">4</span> <span class="token keyword">and</span> axis <span class="token operator">></span> <span class="token number">0.3</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"LT"</span><span class="token punctuation">,</span> axis<span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">5</span> <span class="token keyword">and</span> axis <span class="token operator">></span> <span class="token number">0.3</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"RT"</span><span class="token punctuation">,</span> axis<span class="token punctuation">)</span>        buttons <span class="token operator">=</span> joystick<span class="token punctuation">.</span>get_numbuttons<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>buttons<span class="token punctuation">)</span><span class="token punctuation">:</span>            button <span class="token operator">=</span> joystick<span class="token punctuation">.</span>get_button<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> button <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">and</span> button <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">2</span> <span class="token keyword">and</span> button <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"X"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">3</span> <span class="token keyword">and</span> button <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Y"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">4</span> <span class="token keyword">and</span> button <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"LB"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">5</span> <span class="token keyword">and</span> button <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"RB"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">6</span> <span class="token keyword">and</span> button <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"BACK"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">7</span> <span class="token keyword">and</span> button <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"START"</span><span class="token punctuation">)</span>        <span class="token comment"># Hat switch. All or nothing for direction, not like joysticks.</span>        <span class="token comment"># Value comes back in an array.</span>        hats <span class="token operator">=</span> joystick<span class="token punctuation">.</span>get_numhats<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>hats<span class="token punctuation">)</span><span class="token punctuation">:</span>            hat <span class="token operator">=</span> joystick<span class="token punctuation">.</span>get_hat<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">if</span> hat <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"FX right"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> hat <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"FX left"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> hat <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"FX up"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> hat <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"FX down"</span><span class="token punctuation">)</span><span class="token comment"># Close the window and quit.</span><span class="token comment"># If you forget this line, the program will 'hang'</span><span class="token comment"># on exit if running from IDLE.</span>pygame<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="调试器"><a href="#调试器" class="headerlink" title="调试器"></a>调试器</h2><p>具体详见<a href="https://pygame.itch.io/pygame-book">pygame.joystick 官方文档</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">  <span class="token keyword">import</span> pygame<span class="token comment"># Define some colors</span>BLACK <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>WHITE <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token comment"># This is a simple class that will help us print to the screen</span><span class="token comment"># It has nothing to do with the joysticks, just outputting the</span><span class="token comment"># information.</span><span class="token keyword">class</span> <span class="token class-name">TextPrint</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>font <span class="token operator">=</span> pygame<span class="token punctuation">.</span>font<span class="token punctuation">.</span>Font<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">print</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> screen<span class="token punctuation">,</span> textString<span class="token punctuation">)</span><span class="token punctuation">:</span>        textBitmap <span class="token operator">=</span> self<span class="token punctuation">.</span>font<span class="token punctuation">.</span>render<span class="token punctuation">(</span>textString<span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> BLACK<span class="token punctuation">)</span>        screen<span class="token punctuation">.</span>blit<span class="token punctuation">(</span>textBitmap<span class="token punctuation">,</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>x<span class="token punctuation">,</span> self<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>y <span class="token operator">+=</span> self<span class="token punctuation">.</span>line_height    <span class="token keyword">def</span> <span class="token function">reset</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">10</span>        self<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">10</span>        self<span class="token punctuation">.</span>line_height <span class="token operator">=</span> <span class="token number">15</span>    <span class="token keyword">def</span> <span class="token function">indent</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">+=</span> <span class="token number">10</span>    <span class="token keyword">def</span> <span class="token function">unindent</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">-=</span> <span class="token number">10</span>pygame<span class="token punctuation">.</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># Set the width and height of the screen [width,height]</span>size <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">700</span><span class="token punctuation">]</span>screen <span class="token operator">=</span> pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>set_mode<span class="token punctuation">(</span>size<span class="token punctuation">)</span>pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>set_caption<span class="token punctuation">(</span><span class="token string">"My Game"</span><span class="token punctuation">)</span><span class="token comment"># Loop until the user clicks the close button.</span>done <span class="token operator">=</span> <span class="token boolean">False</span><span class="token comment"># Used to manage how fast the screen updates</span>clock <span class="token operator">=</span> pygame<span class="token punctuation">.</span>time<span class="token punctuation">.</span>Clock<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># Initialize the joysticks</span>pygame<span class="token punctuation">.</span>joystick<span class="token punctuation">.</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># Get ready to print</span>textPrint <span class="token operator">=</span> TextPrint<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># -------- Main Program Loop -----------</span><span class="token keyword">while</span> done <span class="token operator">==</span> <span class="token boolean">False</span><span class="token punctuation">:</span>    <span class="token comment"># EVENT PROCESSING STEP</span>    <span class="token keyword">for</span> event <span class="token keyword">in</span> pygame<span class="token punctuation">.</span>event<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># User did something</span>        <span class="token keyword">if</span> event<span class="token punctuation">.</span><span class="token builtin">type</span> <span class="token operator">==</span> pygame<span class="token punctuation">.</span>QUIT<span class="token punctuation">:</span>  <span class="token comment"># If user clicked close</span>            done <span class="token operator">=</span> <span class="token boolean">True</span>  <span class="token comment"># Flag that we are done so we exit this loop</span>        <span class="token comment"># Possible joystick actions: JOYAXISMOTION JOYBALLMOTION JOYBUTTONDOWN JOYBUTTONUP JOYHATMOTION</span>    <span class="token comment"># if event.type == pygame.JOYBUTTONDOWN:</span>    <span class="token comment">#    print("Joystick button pressed.")</span>    <span class="token comment"># if event.type == pygame.JOYBUTTONUP:</span>    <span class="token comment">#    print("Joystick button released.")</span>    <span class="token comment"># DRAWING STEP</span>    <span class="token comment"># First, clear the screen to white. Don't put other drawing commands</span>    <span class="token comment"># above this, or they will be erased with this command.</span>    screen<span class="token punctuation">.</span>fill<span class="token punctuation">(</span>WHITE<span class="token punctuation">)</span>    textPrint<span class="token punctuation">.</span>reset<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># Get count of joysticks</span>    joystick_count <span class="token operator">=</span> pygame<span class="token punctuation">.</span>joystick<span class="token punctuation">.</span>get_count<span class="token punctuation">(</span><span class="token punctuation">)</span>    textPrint<span class="token punctuation">.</span><span class="token keyword">print</span><span class="token punctuation">(</span>screen<span class="token punctuation">,</span> <span class="token string">"Number of joysticks: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>joystick_count<span class="token punctuation">)</span> <span class="token punctuation">)</span>    textPrint<span class="token punctuation">.</span>indent<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># For each joystick:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>joystick_count<span class="token punctuation">)</span><span class="token punctuation">:</span>        joystick <span class="token operator">=</span> pygame<span class="token punctuation">.</span>joystick<span class="token punctuation">.</span>Joystick<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        joystick<span class="token punctuation">.</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span>        textPrint<span class="token punctuation">.</span><span class="token keyword">print</span><span class="token punctuation">(</span>screen<span class="token punctuation">,</span> <span class="token string">"Joystick &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">)</span>        textPrint<span class="token punctuation">.</span>indent<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># Get the name from the OS for the controller/joystick</span>        name <span class="token operator">=</span> joystick<span class="token punctuation">.</span>get_name<span class="token punctuation">(</span><span class="token punctuation">)</span>        textPrint<span class="token punctuation">.</span><span class="token keyword">print</span><span class="token punctuation">(</span>screen<span class="token punctuation">,</span> <span class="token string">"Joystick name: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">)</span>        <span class="token comment"># Usually axis run in pairs, up/down for one, and left/right for</span>        <span class="token comment"># the other.</span>        axes <span class="token operator">=</span> joystick<span class="token punctuation">.</span>get_numaxes<span class="token punctuation">(</span><span class="token punctuation">)</span>        textPrint<span class="token punctuation">.</span><span class="token keyword">print</span><span class="token punctuation">(</span>screen<span class="token punctuation">,</span> <span class="token string">"Number of axes: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>axes<span class="token punctuation">)</span> <span class="token punctuation">)</span>        textPrint<span class="token punctuation">.</span>indent<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># joysticks</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>axes<span class="token punctuation">)</span><span class="token punctuation">:</span>            axis <span class="token operator">=</span> joystick<span class="token punctuation">.</span>get_axis<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            textPrint<span class="token punctuation">.</span><span class="token keyword">print</span><span class="token punctuation">(</span>screen<span class="token punctuation">,</span> <span class="token string">"Axis &#123;&#125; value: &#123;:>6.3f&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> axis<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">and</span> axis <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Left up"</span><span class="token punctuation">,</span> axis<span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">and</span> axis <span class="token operator">></span> <span class="token number">0.3</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Left down"</span><span class="token punctuation">,</span> axis<span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> axis <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Left left"</span><span class="token punctuation">,</span> axis<span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> axis <span class="token operator">></span> <span class="token number">0.3</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Left right"</span><span class="token punctuation">,</span> axis<span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">3</span> <span class="token keyword">and</span> axis <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Right up"</span><span class="token punctuation">,</span> axis<span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">3</span> <span class="token keyword">and</span> axis <span class="token operator">></span> <span class="token number">0.3</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Right down"</span><span class="token punctuation">,</span> axis<span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">2</span> <span class="token keyword">and</span> axis <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Right left"</span><span class="token punctuation">,</span> axis<span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">2</span> <span class="token keyword">and</span> axis <span class="token operator">></span> <span class="token number">0.3</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Right right"</span><span class="token punctuation">,</span> axis<span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">4</span> <span class="token keyword">and</span> axis <span class="token operator">></span> <span class="token number">0.3</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"LT"</span><span class="token punctuation">,</span> axis<span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">5</span> <span class="token keyword">and</span> axis <span class="token operator">></span> <span class="token number">0.3</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"RT"</span><span class="token punctuation">,</span> axis<span class="token punctuation">)</span>        textPrint<span class="token punctuation">.</span>unindent<span class="token punctuation">(</span><span class="token punctuation">)</span>        buttons <span class="token operator">=</span> joystick<span class="token punctuation">.</span>get_numbuttons<span class="token punctuation">(</span><span class="token punctuation">)</span>        textPrint<span class="token punctuation">.</span><span class="token keyword">print</span><span class="token punctuation">(</span>screen<span class="token punctuation">,</span> <span class="token string">"Number of buttons: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>buttons<span class="token punctuation">)</span><span class="token punctuation">)</span>        textPrint<span class="token punctuation">.</span>indent<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># buttons</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>buttons<span class="token punctuation">)</span><span class="token punctuation">:</span>            button <span class="token operator">=</span> joystick<span class="token punctuation">.</span>get_button<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            textPrint<span class="token punctuation">.</span><span class="token keyword">print</span><span class="token punctuation">(</span>screen<span class="token punctuation">,</span> <span class="token string">"Button &#123;:>2&#125; value: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> button<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> button <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">and</span> button <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">2</span> <span class="token keyword">and</span> button <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"X"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">3</span> <span class="token keyword">and</span> button <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Y"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">4</span> <span class="token keyword">and</span> button <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"LB"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">5</span> <span class="token keyword">and</span> button <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"RB"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">6</span> <span class="token keyword">and</span> button <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"BACK"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">7</span> <span class="token keyword">and</span> button <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"START"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">8</span> <span class="token keyword">and</span> button <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Logitech"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">9</span> <span class="token keyword">and</span> button <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Left GA"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">10</span> <span class="token keyword">and</span> button <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Right GA"</span><span class="token punctuation">)</span>        textPrint<span class="token punctuation">.</span>unindent<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># Hat switch. All or nothing for direction, not like joysticks.</span>        <span class="token comment"># Value comes back in an array.</span>        hats <span class="token operator">=</span> joystick<span class="token punctuation">.</span>get_numhats<span class="token punctuation">(</span><span class="token punctuation">)</span>        textPrint<span class="token punctuation">.</span><span class="token keyword">print</span><span class="token punctuation">(</span>screen<span class="token punctuation">,</span> <span class="token string">"Number of hats: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>hats<span class="token punctuation">)</span><span class="token punctuation">)</span>        textPrint<span class="token punctuation">.</span>indent<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># hats</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>hats<span class="token punctuation">)</span><span class="token punctuation">:</span>            hat <span class="token operator">=</span> joystick<span class="token punctuation">.</span>get_hat<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            textPrint<span class="token punctuation">.</span><span class="token keyword">print</span><span class="token punctuation">(</span>screen<span class="token punctuation">,</span> <span class="token string">"Hat &#123;&#125; value: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>hat<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> hat <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"FX right"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> hat <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"FX left"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> hat <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"FX up"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> hat <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"FX down"</span><span class="token punctuation">)</span>        textPrint<span class="token punctuation">.</span>unindent<span class="token punctuation">(</span><span class="token punctuation">)</span>        textPrint<span class="token punctuation">.</span>unindent<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># ALL CODE TO DRAW SHOULD GO ABOVE THIS COMMENT</span>    <span class="token comment"># Go ahead and update the screen with what we've drawn.</span>    pygame<span class="token punctuation">.</span>display<span class="token punctuation">.</span>flip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># Limit to 20 frames per second</span>    clock<span class="token punctuation">.</span>tick<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token comment"># Close the window and quit.</span><span class="token comment"># If you forget this line, the program will 'hang'</span><span class="token comment"># on exit if running from IDLE.</span>pygame<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> experiment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xbox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>60%键盘的探索之旅</title>
      <link href="/60-jian-pan-de-tan-suo-zhi-lu/2022/06/05/"/>
      <url>/60-jian-pan-de-tan-suo-zhi-lu/2022/06/05/</url>
      
        <content type="html"><![CDATA[<h1 id="60-键盘的探索之旅"><a href="#60-键盘的探索之旅" class="headerlink" title="60%键盘的探索之旅"></a>60%键盘的探索之旅</h1><h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2>]]></content>
      
      
      <categories>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 键盘 </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>玩转OpenWrt系列</title>
      <link href="/wan-zhuan-openwrt-xi-lie/2022/05/16/"/>
      <url>/wan-zhuan-openwrt-xi-lie/2022/05/16/</url>
      
        <content type="html"><![CDATA[<h1 id="玩转-OpenWrt-系列"><a href="#玩转-OpenWrt-系列" class="headerlink" title="玩转 OpenWrt 系列"></a>玩转 OpenWrt 系列</h1><p>此系列用于记录探索 OpenWrt 的过程，也作为以后快速异地部署的教程。</p><p>目前有如下文章：<br><a href="https://lgds01.github.io/wan-zhuan-openwrt-xi-lie-pang-lu-you-she-zhi/2022/02/20/">玩转 OpenWrt 系列——旁路由设置</a><br><a href="https://lgds01.github.io/wan-zhuan-openwrt-xi-lie-passwall/2022/02/22/">玩转 OpenWrt 系列——PassWall</a><br><a href="https://lgds01.github.io/wan-zhuan-openwrt-xi-lie-smartdns/2022/02/24/">玩转 OpenWrt 系列——SmartDNS</a><br><a href="https://lgds01.github.io/wan-zhuan-openwrt-xi-lie-shadowsocksr-plus/2022/02/25/">玩转 OpenWrt 系列——ShadowSocksR Plus+</a><br><a href="https://lgds01.github.io/wan-zhuan-openwrt-xi-lie-docker-zhong-an-zhuang-bing-pei-zhi-pang-lu-you/2022/06/26/">玩转OpenWrt系列——docker中安装并配置旁路由</a></p>]]></content>
      
      
      <categories>
          
          <category> experiment </category>
          
          <category> openwrt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用N2N连接不同内网主机全流程</title>
      <link href="/shi-yong-n2n-lian-jie-bu-tong-nei-wang-zhu-ji-quan-liu-cheng/2022/05/15/"/>
      <url>/shi-yong-n2n-lian-jie-bu-tong-nei-wang-zhu-ji-quan-liu-cheng/2022/05/15/</url>
      
        <content type="html"><![CDATA[<h1 id="使用-N2N-连接不同内网主机全流程"><a href="#使用-N2N-连接不同内网主机全流程" class="headerlink" title="使用 N2N 连接不同内网主机全流程"></a>使用 N2N 连接不同内网主机全流程</h1><h2 id="n2n-原理"><a href="#n2n-原理" class="headerlink" title="n2n 原理"></a>n2n 原理</h2><p>n2n 有两种节点，分别为超级节点(super node)和边缘节点(edge node)。</p><ul><li>超级节点：它允许边缘节点宣布和发现其他节点。它必须有一个可在 Internet 上公开访问的端口(<strong>具有公网 IP</strong>)。</li><li>边缘节点：将成为虚拟网络一部分的节点</li></ul><p>n2n 中多个边缘节点之间共享的虚拟网络称为社区。单个超级节点可以中继多个社区，一台计算机可以同时成为多个社区的一部分。边缘节点可以使用加密密钥来加密其社区内的数据包。</p><p>当第一次连接时，需要通过超级节点来建立边缘节点之间的点对点连接，当这不可能时，将<strong>通过超级节点中继数据包</strong>。</p><p>根据官方的说明，可能由于特殊的 NAT 设备导致不能进行点对点连接，而使用超级节点中继时，超级节点的带宽就决定了传输速率。</p><h2 id="版本说明"><a href="#版本说明" class="headerlink" title="版本说明"></a>版本说明</h2><p>n2n 目前有三种版本,并且官方不提供二进制文件，需要自己进行编译。三种版本之间不可混用，即要使用相同版本的 super node 和 edge node。</p><ul><li>v1: <a href="https://github.com/meyerd/n2n/tree/master/n2n_v1">https://github.com/meyerd/n2n/tree/master/n2n_v1</a> （版本号是 v.1.x.x）</li><li>v2: <a href="https://github.com/ntop/n2n">https://github.com/ntop/n2n</a> （版本号是 v.2.x.x）</li><li>v2s: <a href="https://github.com/meyerd/n2n/tree/master/n2n_v2">https://github.com/meyerd/n2n/tree/master/n2n_v2</a> （版本号是 v.2.1.0）德国大佬写的 n2n v2 分支，非官方版本。</li><li>v3: <a href="https://github.com/ntop/n2n">https://github.com/ntop/n2n</a> （版本号是 v.3.x.x) 官方正在维护</li></ul><p>此次使用 n2n v2 版本，因为这是官方版本，且一直在维护。使用<a href="https://github.com/lucktu/n2n">lucktu 编译的二进制文件</a></p><h2 id="服务端设置"><a href="#服务端设置" class="headerlink" title="服务端设置"></a>服务端设置</h2><p>服务端为 ubuntu 环境。使用如下命令搭建 super node。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 下载n2n_v2_linux_x64版本</span><span class="token function">wget</span> https://github.com/lucktu/n2n/blob/master/Linux/n2n_v3_linux_x64_v3.1.1-16_r1200_all_by_heiye.rar<span class="token comment"># 解压</span><span class="token function">unzip</span> n2n_v2_linux_x64_v2.7.0_r525_all_by_heiye.zip<span class="token comment"># 增加可执行权限</span><span class="token builtin class-name">cd</span> n2n_v2_linux_x64_v2.7.0_r525_Bstatic_by_heiye/<span class="token function">chmod</span> u+x edge supernode<span class="token comment"># 服务端监听6789端口</span>supernode -l <span class="token number">6789</span><span class="token comment"># 服务端也当作客户端使用，将服务端也加入虚拟网络(可选)</span>edge -a <span class="token number">10.0</span>.0.10 -c <span class="token builtin class-name">test</span> -k <span class="token number">12345</span> -l 超级节点公网IP:6789 -v -f<span class="token comment"># -a 虚拟网络ip</span><span class="token comment"># -c 社区名称</span><span class="token comment"># -k 社区密钥</span><span class="token comment"># -l 超级节点公网ip:port</span><span class="token comment"># -v -f 可视化debug输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>记得打开服务器的 6789 端口。</p><h2 id="windows-客户端设置"><a href="#windows-客户端设置" class="headerlink" title="windows 客户端设置"></a>windows 客户端设置</h2><p>使用<a href="https://github.com/dwj0/n2n-gui-for-windows">dwj0 编写的 gui 软件</a>简化操作。根据 readme 操作即可。<br>注意点：<br>开启后使用<code>ipconfig/all</code>查看是否有如下配置<br><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202205152019417.png"><br>同时网络管理中心也多出来对应的虚拟网卡<br><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202205152019410.png"><br>如果发现网卡地址和填写的虚拟网络 ip 地址不一样，则需要到网络管理中心进行如下操作：<br><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202205152023686.jpg"></p><h2 id="命令行客户端设置"><a href="#命令行客户端设置" class="headerlink" title="命令行客户端设置"></a>命令行客户端设置</h2><p>需要下载<a href="https://github.com/lucktu/n2n/blob/master/Linux/n2n_v3_linux_x64_v3.1.1-16_r1200_all_by_heiye.rar">lucktu 编译的二进制文件</a>，使用如下命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">edge -a <span class="token number">10.0</span>.0.14 -c <span class="token builtin class-name">test</span> -k <span class="token number">12345</span> -l 超级节点公网IP:6789 -v -f<span class="token comment"># -a 虚拟网络ip</span><span class="token comment"># -c 社区名称</span><span class="token comment"># -k 社区密钥</span><span class="token comment"># -l 超级节点公网ip:port</span><span class="token comment"># -v -f 可视化debug输出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="验证是否成功连接"><a href="#验证是否成功连接" class="headerlink" title="验证是否成功连接"></a>验证是否成功连接</h2><p>使用<code>ping 虚拟网络ip</code>命令即可，若能 ping 通，则两台主机之间联通。</p>]]></content>
      
      
      <categories>
          
          <category> experiment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> n2n </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派安装泰拉瑞亚服务器并使用frp穿透</title>
      <link href="/shu-mei-pai-an-zhuang-tai-la-rui-ya-fu-wu-qi-bing-shi-yong-frp-chuan-tou/2022/02/26/"/>
      <url>/shu-mei-pai-an-zhuang-tai-la-rui-ya-fu-wu-qi-bing-shi-yong-frp-chuan-tou/2022/02/26/</url>
      
        <content type="html"><![CDATA[<h1 id="树莓派安装泰拉瑞亚服务器并使用frp穿透"><a href="#树莓派安装泰拉瑞亚服务器并使用frp穿透" class="headerlink" title="树莓派安装泰拉瑞亚服务器并使用frp穿透"></a>树莓派安装泰拉瑞亚服务器并使用frp穿透</h1><h2 id="1-树莓派配置"><a href="#1-树莓派配置" class="headerlink" title="1.树莓派配置"></a>1.树莓派配置</h2><ul><li>raspberry pi 4b 4g</li><li>系统为ubuntu 20.04 64bit for raspi</li></ul><h2 id="2-下载泰拉瑞亚服务端"><a href="#2-下载泰拉瑞亚服务端" class="headerlink" title="2.下载泰拉瑞亚服务端"></a>2.下载泰拉瑞亚服务端</h2><p><a href="https://terraria.fandom.com/zh/wiki/%E6%9C%8D%E5%8A%A1%E5%99%A8">服务端下载地址</a></p><p>使用wget下载Terraria Server 1.4.1.2</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://terraria.org/api/download/pc-dedicated-server/terraria-server-1432.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解压</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">unzip</span> terraria-server-1432.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>移动到&#x2F;opt</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mv</span> <span class="token number">1432</span>/ /opt/terraria<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入对应目录并增加可执行权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /opt/terraria/Linux<span class="token function">sudo</span> <span class="token function">chmod</span> u+x TerrariaS*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-安装Net运行时环境mono"><a href="#3-安装Net运行时环境mono" class="headerlink" title="3.安装Net运行时环境mono"></a>3.安装Net运行时环境mono</h2><p>参照<a href="https://www.mono-project.com/download/stable/#download-lin">mono官网说明</a></p><p>将mono仓库加入系统</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> gnupg ca-certificates<span class="token function">sudo</span> apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF<span class="token builtin class-name">echo</span> <span class="token string">"deb https://download.mono-project.com/repo/ubuntu stable-focal main"</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/apt/sources.list.d/mono-official-stable.list<span class="token function">sudo</span> <span class="token function">apt</span> update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>安装mono</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> mono-devel<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-运行泰拉瑞亚服务端程序"><a href="#4-运行泰拉瑞亚服务端程序" class="headerlink" title="4.运行泰拉瑞亚服务端程序"></a>4.运行泰拉瑞亚服务端程序</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mono TerrariaServer.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>PS：</p><ul><li><p>若出现以下错误</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Your mono runtime and class libraries are out of sync. The out of <span class="token function">sync</span> library is: /opt/terraria/Linux/System.dll<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>则<code>sudo rm /opt/terraria/Linux/System.dll</code>即可</p></li><li><p>默认World文件在<code>~/.local/share/terraria</code>中</p></li></ul><h2 id="附加：利用腾讯云服务器和frp，从公网访问泰拉瑞亚"><a href="#附加：利用腾讯云服务器和frp，从公网访问泰拉瑞亚" class="headerlink" title="附加：利用腾讯云服务器和frp，从公网访问泰拉瑞亚"></a>附加：利用腾讯云服务器和frp，从公网访问泰拉瑞亚</h2><p>起因：本来泰拉瑞亚服务端挂在腾讯云服务器上，但是这个服务器只有1核1G，因此经常宕机，所以想到了将服务端运行在树莓派上，利用frp内网穿透，从而能够实现公网访问泰拉瑞亚服务器</p><p>服务器和树莓派都使用如下命令下载并解压frp</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://github.com/fatedier/frp/releases/download/v0.38.0/frp_0.38.0_linux_arm64.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>frp的配置参照<a href="https://gofrp.org/docs/examples/ssh/">frp官方文档</a></p><ul><li><p>服务器</p><p>修改frps.ini文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>common<span class="token punctuation">]</span>bind_port <span class="token operator">=</span> <span class="token number">7000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>树莓派</p><p>修改frpc.ini文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>common<span class="token punctuation">]</span>server_addr <span class="token operator">=</span> x.x.x.xserver_port <span class="token operator">=</span> <span class="token number">7000</span><span class="token punctuation">[</span>ssh<span class="token punctuation">]</span><span class="token builtin class-name">type</span> <span class="token operator">=</span> tcplocal_ip <span class="token operator">=</span> <span class="token number">127.0</span>.0.1local_port <span class="token operator">=</span> <span class="token number">22</span>remote_port <span class="token operator">=</span> <span class="token number">6000</span><span class="token punctuation">[</span>terraria<span class="token punctuation">]</span><span class="token builtin class-name">type</span> <span class="token operator">=</span> tcplocal_ip <span class="token operator">=</span> <span class="token number">127.0</span>.0.1local_port <span class="token operator">=</span> <span class="token number">7777</span>remote_port <span class="token operator">=</span> <span class="token number">6010</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>同时需要开放腾讯云服务器的7000、6000、6010端口（其中，6000端口用于远程ssh登录树莓派，6010端口用于连接泰拉瑞亚服务器）</p><p>因此，连接泰拉瑞亚服务器时，<strong>ip为x.x.x.x，端口为6010</strong></p>]]></content>
      
      
      <categories>
          
          <category> experiment </category>
          
          <category> raspberry pi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> raspberry pi </tag>
            
            <tag> frp </tag>
            
            <tag> game </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>玩转OpenWrt系列——ShadowSocksR Plus+</title>
      <link href="/wan-zhuan-openwrt-xi-lie-shadowsocksr-plus/2022/02/25/"/>
      <url>/wan-zhuan-openwrt-xi-lie-shadowsocksr-plus/2022/02/25/</url>
      
        <content type="html"><![CDATA[<h1 id="玩转OpenWrt系列——ShadowSocksR-Plus"><a href="#玩转OpenWrt系列——ShadowSocksR-Plus" class="headerlink" title="玩转OpenWrt系列——ShadowSocksR Plus+"></a>玩转OpenWrt系列——ShadowSocksR Plus+</h1><h2 id="一、ShadowSocksR-Plus"><a href="#一、ShadowSocksR-Plus" class="headerlink" title="一、ShadowSocksR Plus+"></a>一、ShadowSocksR Plus+</h2><p>ShadowSocksR Plus+别名酸酸乳Plus，支持 SS&#x2F;SSR&#x2F;V2RAY&#x2F;XRAY&#x2F;TROJAN&#x2F;NAIVEPROXY&#x2F;SOCKS5&#x2F;TUN 等大多数协议，使用简单，且对CPU性能要求较低，兼容绝大多数网站</p><h2 id="二、酸酸乳Plus配置"><a href="#二、酸酸乳Plus配置" class="headerlink" title="二、酸酸乳Plus配置"></a>二、酸酸乳Plus配置</h2><h3 id="1-新增服务器节点"><a href="#1-新增服务器节点" class="headerlink" title="1.新增服务器节点"></a>1.新增服务器节点</h3><p>1）通过机场订阅链接添加</p><p>在服务器节点页面填写机场订阅链接，依次点击更新订阅URL列表、保存并应用、更新所有订阅服务器节点，如下</p><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202202251630666.png" alt="image-20220225163028598"></p><p>2）通过节点链接新增</p><p>点击左下角新增，然后点击导入配置信息，填写节点链接后保存并应用</p><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202202251632638.png" alt="image-20220225163237607"></p><p>3）通过填写节点属性添加</p><p>点击左下角新增，填写节点各项属性，然后点击保存并应用</p><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202202251634608.png" alt="image-20220225163433578"></p><h3 id="2-设置客户端属性"><a href="#2-设置客户端属性" class="headerlink" title="2.设置客户端属性"></a>2.设置客户端属性</h3><p>在客户端页面中，选择一个主服务器，设置DNS解析方式与服务器，然后保存并应用</p><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202202251638707.png" alt="image-20220225163824676"></p><h3 id="3-高级设置"><a href="#3-高级设置" class="headerlink" title="3.高级设置"></a>3.高级设置</h3><p>在高级设置页面，打开自动切换和广告屏蔽，设置检查周期、GFW更新URL、广告屏蔽更新URL，然后保存并应用如下</p><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202202251640461.png" alt="image-20220225164044435"></p><h3 id="4-更新数据库"><a href="#4-更新数据库" class="headerlink" title="4.更新数据库"></a>4.更新数据库</h3><p>在状态页面中，点击更新GFW列表、国内IP段、广告屏蔽数据库</p><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202202251642902.png" alt="image-20220225164209870"></p><h2 id="三、配合SmartDNS使用"><a href="#三、配合SmartDNS使用" class="headerlink" title="三、配合SmartDNS使用"></a>三、配合SmartDNS使用</h2><h3 id="1-Lan口DNS服务器设置"><a href="#1-Lan口DNS服务器设置" class="headerlink" title="1.Lan口DNS服务器设置"></a>1.Lan口DNS服务器设置</h3><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202202251645887.png" alt="image-20220225164539852"></p><h3 id="2-SmartDNS设置"><a href="#2-SmartDNS设置" class="headerlink" title="2.SmartDNS设置"></a>2.SmartDNS设置</h3><p>首先需要关闭所有科学上网插件以及DNS插件</p><p>设置DNS上游服务器，如下</p><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202202251647988.png" alt="image-20220225164739952"></p><p>常规设置如下</p><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202202251651225.png" alt="image-20220225165127199"></p><p>第二DNS服务器设置如下</p><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202202251650011.png" alt="image-20220225165031976"></p><h3 id="3-酸酸乳Plus设置"><a href="#3-酸酸乳Plus设置" class="headerlink" title="3.酸酸乳Plus设置"></a>3.酸酸乳Plus设置</h3><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202202251653032.png" alt="image-20220225165307985"></p><h2 id="四、DNS解析流程的实验"><a href="#四、DNS解析流程的实验" class="headerlink" title="四、DNS解析流程的实验"></a>四、DNS解析流程的实验</h2><p>实验结论：<strong>SSR+解析国内域名时使用OpenWrt集成的Dnsmasq服务器</strong>，因此需要将SmartDNS重定向为dnsmasq的上游服务器；<strong>当解析国外域名时，使用在SSR+页面设置的DNS解析方式</strong>，因此将SmartDNS第二服务器端口设为5335，SSR+DNS解析方式设为使用本机端口为5335的DNS服务。</p><p>实验过程：</p><ol><li>关闭SmartDNS第一服务器，使用<code>nslookup 国内域名</code>时无法返回服务器ip地址（该国内域名需要是为被缓存过的），因此可以判定，SSR+解析国内域名时使用OpenWrt集成的Dnsmasq服务器。</li><li>关闭SmartDNS第二服务器，使用<code>nslookup 国外域名</code>时无法返回服务器ip地址（该国外域名需要是为被缓存过的），因此可以判定，SSR+解析国外域名时使用在SSR+页面设置的DNS解析方式。</li></ol>]]></content>
      
      
      <categories>
          
          <category> experiment </category>
          
          <category> openwrt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
            <tag> shadowsocksr plus+ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>玩转OpenWrt系列——SmartDNS</title>
      <link href="/wan-zhuan-openwrt-xi-lie-smartdns/2022/02/24/"/>
      <url>/wan-zhuan-openwrt-xi-lie-smartdns/2022/02/24/</url>
      
        <content type="html"><![CDATA[<h1 id="玩转OpenWrt系列——SmartDNS"><a href="#玩转OpenWrt系列——SmartDNS" class="headerlink" title="玩转OpenWrt系列——SmartDNS"></a>玩转OpenWrt系列——SmartDNS</h1><h2 id="一、DNS"><a href="#一、DNS" class="headerlink" title="一、DNS"></a>一、DNS</h2><p>DNS即为域名解析系统，能够将域名解析为IP地址，从而访问服务器。</p><p>通常情况下如果在设备或者路由器上未指定 DNS 服务器则默认使用运营商的DNS解析，也就是自动获取DNS服务器。但是这些DNS服务器可能抽风或则会包含大量广告，因此我们可以使用一些第三方的纯净DNS服务器。</p><p>国内常用DNS服务器：</p><ol><li><p>114 DNS</p><p>国内用户数多的DNS服务器，高速，电信联通移动全国通用DNS，能引导您到最快的网站，手机和计算机都可用<br>稳定 DNS解析成功率超高，与ISP的DNS相比，能访问更多的国内外网站。</p><p>纯净、无劫持、无广告或粗俗网站<br>DNS 地址：114.114.114.114 和 114.114.115.115</p><p>拦截 钓鱼病毒木马网站 增强网银、证券、购物、游戏、隐私信息安全<br>DNS 地址：114.114.114.119 和 114.114.115.119</p><p>学校或家长可选拦截色情网站、保护少年儿童免受网络色情内容的毒害<br>DNS 地址：114.114.114.110 和 114.114.115.110</p></li><li><p>阿里 DNS</p><p>阿里公共DNS是阿里巴巴集团推出的DNS递归解析系统，目标是成为国内互联网基础设施的组成部分，面向互联网用户提供“快速”、“稳定”、“智能”的免费DNS递归解析服务。</p><p>DNS 地址：223.5.5.5，223.6.6.6，2400:3200::1，2400:3200:baba::1</p></li><li><p>腾讯 DNS</p><p>国内独家支持国密 SM2 DoH，腾讯 DNS 是由 DNSpod提供的 DNS 服务，称有安全零劫持、准确不丢包、快速无等待、稳定多容灾的优势。解析精准，没有劫持，最最牛逼的是支持 Google ECS(edns-client-subnet) 协议，在使用 DNSPod 公共 DNS 时的解析准确度仅受各家DNS的IP库准确度影响，不再依赖于后端递归节点的部署情况。</p><p>DNS 地址：119.29.29.29，2402:4e00::</p></li><li><p>DNS 派</p><p>DNS 派旨在为用户提供一个高速、稳定、安全的上网环境。</p><p>DNS 地址：101.226.4.6(电信)，123.125.81.6(联通)，101.226.4.6(移动)，101.226.4.6(铁通)</p></li><li><p>Google DNS</p><p>由于懂得都懂的原因，使用谷歌DNS国内网站访问很慢。</p><p>DNS地址：8.8.8.8和8.8.4.4</p></li><li><p>OpenDNS</p><p>同样是国外DNS服务提供商</p><p>DNS 地址：208.67.222.222，208.67.220.220</p></li></ol><h2 id="二、SmartDNS"><a href="#二、SmartDNS" class="headerlink" title="二、SmartDNS"></a>二、SmartDNS</h2><p><a href="https://pymumu.github.io/smartdns/#faq">SmartDNS官方网站</a></p><p>SmartDNS是一个运行在本地的DNS服务器，SmartDNS接受本地客户端的DNS查询请求，从多个上游DNS服务器获取DNS查询结果，并将访问速度最快的结果返回给客户端，提高网络访问速度。 同时支持指定特定域名IP地址，并高性匹配，达到过滤广告的效果。与dnsmasq的all-servers不同，smartdns返回的是访问速度最快的解析结果。</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ol><li>多DNS上游服务器<br>支持配置多个上游DNS服务器，并同时进行查询，即使其中有DNS服务器异常，也不会影响查询。</li><li>返回最快IP地址<br>支持从域名所属IP地址列表中查找到访问速度最快的IP地址，并返回给客户端，提高网络访问速度。</li><li>支持多种查询协议<br>支持UDP，TCP，TLS, HTTPS查询，以及非53端口查询。</li><li>特定域名IP地址指定<br>支持指定域名的IP地址，达到广告过滤效果，避免恶意网站的效果。</li><li>域名高性能后缀匹配<br>支持域名后缀匹配模式，简化过滤配置，过滤20万条记录时间&lt;1ms</li><li>域名分流<br>支持域名分流，不同类型的域名到不同的DNS服务器查询。</li><li>Linux&#x2F;Windows多平台支持<br>支持标准Linux系统（树莓派），openwrt系统各种固件，华硕路由器原生固件。以及支持Windows 10 WSL (Windows Subsystem for Linux)。</li><li>支持IPV4, IPV6双栈<br>支持IPV4，IPV6网络，支持查询A, AAAA记录，支持双栈IP速度优化，并支持完全禁用IPV6 AAAA解析。</li><li>高性能，占用资源少<br>多线程异步IO模式，cache缓存查询结果。</li></ol><h2 id="三、SmartDNS配置"><a href="#三、SmartDNS配置" class="headerlink" title="三、SmartDNS配置"></a>三、SmartDNS配置</h2><p><strong>未完全理解该插件运作机制，只是根据我的尝试得出的教程</strong></p><ol><li><p>新增上游DNS服务器</p><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202202240009098.png" alt="image-20220224000931004"></p><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202202240010035.png" alt="image-20220224001018014"></p></li><li><p>设置第一和第二DNS服务器</p><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202202240012895.png" alt="image-20220224001250868"></p><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202202240013114.png" alt="image-20220224001344078"></p></li><li><p>检测是否配置成功</p><ul><li><p>方法一：使用<code>nslookup -querytype=ptr smartdns</code>查询域名<br>看命令结果中的<code>name</code>项目是否显示为<code>smartdns</code>或<code>主机名</code>，如<code>smartdns</code>则表示生效</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">nslookup</span> -querytype<span class="token operator">=</span>ptr smartdnsServer:<span class="token number">192.168</span>.2.2Address:<span class="token number">192.168</span>.2.2<span class="token comment">#53</span>Non-authoritative answer:smartdnsname <span class="token operator">=</span> smartdns.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>方法二：使用<code>nslookup</code>查询<code>www.baidu.com</code>域名，查看结果中百度的IP地址是否<code>只有一个</code>，如有多个IP地址返回，则表示未生效，请多尝试几个域名检查。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">nslookup</span> baidu.com <span class="token number">192.168</span>.2.2Server:<span class="token number">192.168</span>.2.2Address:<span class="token number">192.168</span>.2.2<span class="token comment">#53</span>Non-authoritative answer:Name:baidu.comAddress: <span class="token number">220.181</span>.38.251<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ol><h2 id="四、PassWall设置"><a href="#四、PassWall设置" class="headerlink" title="四、PassWall设置"></a>四、PassWall设置</h2><p>在基本设置中，设置DNS属性如下</p><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202202240019904.png" alt="image-20220224001916848"></p>]]></content>
      
      
      <categories>
          
          <category> experiment </category>
          
          <category> openwrt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
            <tag> smartdns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>玩转OpenWrt系列——PassWall</title>
      <link href="/wan-zhuan-openwrt-xi-lie-passwall/2022/02/22/"/>
      <url>/wan-zhuan-openwrt-xi-lie-passwall/2022/02/22/</url>
      
        <content type="html"><![CDATA[<h1 id="玩转OpenWrt系列——PassWall"><a href="#玩转OpenWrt系列——PassWall" class="headerlink" title="玩转OpenWrt系列——PassWall"></a>玩转OpenWrt系列——PassWall</h1><h2 id="一、PassWall作用及好处"><a href="#一、PassWall作用及好处" class="headerlink" title="一、PassWall作用及好处"></a>一、PassWall作用及好处</h2><p>软路由一个很重要的功能就是能够支持局域网内科学上网。OpenWrt拥有很多插件能够满足我们科学上网的需求，比如PassWall、OpenClash、SSR-Plus等，这几款插件的速度主要取决于软路由硬件以及机场的质量，因此<strong>占用小、dns更加稳定</strong>的PassWall是个很好的选择。</p><h2 id="二、PassWall设置"><a href="#二、PassWall设置" class="headerlink" title="二、PassWall设置"></a>二、PassWall设置</h2><ol><li><p>在基本设置中打开主开关，然后保存并应用</p><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202202231134102.png" alt="image-20220223113427078"></p></li><li><p>添加节点，有三种方法：</p><p><strong>1）通过机场订阅链接自动新增节点（推荐）</strong></p><p>在节点订阅选项卡中，点击左下角添加按钮，然后填入机场备注以及订阅链接（一般机场都会给不同类型的订阅链接），然后保存并应用。</p><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202202231138787.png" alt="image-20220223113837765"></p><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202202231140603.png" alt="image-20220223114048574"></p><p>点击手动订阅后选择节点进行订阅</p><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202202231143403.png" alt="image-20220223114334377"></p><p><strong>2）通过链接手动添加节点（推荐）</strong></p><p>在节点列表选项卡中点击通过链接添加节点，之后填入节点链接，点击添加即可</p><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202202231146203.png" alt="image-20220223114646182"></p><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202202231147687.png" alt="image-20220223114718658"></p><p><strong>3）手动设置属性添加节点（不推荐）</strong></p><p>在节点列表选项卡中点击添加按钮，然后点击保存并应用</p><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202202231149168.png" alt="image-20220223114926136"></p><p>填写节点属性</p><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202202231151964.png" alt="image-20220223115110936"></p></li><li><p>在基本设置选项卡中设置TCP节点和UDP节点，其中UDP节点用于代理游戏流量，然后点击保存并应用即可</p><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202202231259594.png" alt="image-20220223125902568"></p></li><li><p>在运行状态中测试是否能够链接谷歌和github</p><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202202231300682.png" alt="image-20220223130026657"></p><p>PS：若谷歌链接多次点击后仍连接失败，则考虑节点不连通，更换节点后再次尝试</p></li><li><p>在自动切换选项卡，启用自动切换，并设置切换节点，然后保存并应用</p><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202202231303787.png" alt="image-20220223130342765"></p></li><li><p>在规则列表设置直连列表和代理列表，有些网站可能想走直连但是走了代理导致无法访问（比如云服务器），可以在这设置</p><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202202231306833.png" alt="image-20220223130630806"></p></li></ol><h2 id="三、网络测试"><a href="#三、网络测试" class="headerlink" title="三、网络测试"></a>三、网络测试</h2><p>播放youtube的4K视屏能达到63000+kbps</p><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202202231309348.png" alt="image-20220223130907291"></p>]]></content>
      
      
      <categories>
          
          <category> experiment </category>
          
          <category> openwrt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openwrt </tag>
            
            <tag> passwall </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>玩转OpenWrt系列——旁路由设置</title>
      <link href="/wan-zhuan-openwrt-xi-lie-pang-lu-you-she-zhi/2022/02/20/"/>
      <url>/wan-zhuan-openwrt-xi-lie-pang-lu-you-she-zhi/2022/02/20/</url>
      
        <content type="html"><![CDATA[<h1 id="玩转-OpenWrt-系列——旁路由设置"><a href="#玩转-OpenWrt-系列——旁路由设置" class="headerlink" title="玩转 OpenWrt 系列——旁路由设置"></a>玩转 OpenWrt 系列——旁路由设置</h1><h2 id="一、旁路由"><a href="#一、旁路由" class="headerlink" title="一、旁路由"></a>一、旁路由</h2><p>旁路由正式名称为旁路网关，是指挂靠在主路由网络下的旁系网络，分担了一部分路由器的功能。</p><p>旁路由作用：</p><ol><li>主路由硬件配置过低，无法承当过大压力时，可由旁路由分担压力，优化网络体验</li><li>在不影响现有网络的情况下，扩展新的功能</li><li>能够通过各种插件扩展功能，丰富上网体验</li></ol><h2 id="二、硬件设备"><a href="#二、硬件设备" class="headerlink" title="二、硬件设备"></a>二、硬件设备</h2><p>Raspberry Pi 4B 4G（当然可以是其他软路由设备）、网线、MacBook</p><h2 id="三、网络拓扑示意图"><a href="#三、网络拓扑示意图" class="headerlink" title="三、网络拓扑示意图"></a>三、网络拓扑示意图</h2><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202202220327176.png" alt="image-20220222032755138"></p><p>所有移动设备的信息都发往旁路由进行处理后，在发给主路由，主路由在发送到互联网。</p><h2 id="四、安装过程"><a href="#四、安装过程" class="headerlink" title="四、安装过程"></a>四、安装过程</h2><h3 id="1-下载固件"><a href="#1-下载固件" class="headerlink" title="1.下载固件"></a>1.下载固件</h3><p>根据软路由设备的型号，可以去<a href="https://openwrt.org/toh/views/toh_fwdownload">官方网站</a>下载对应固件，也可以去找大佬编译好的插件丰富的固件。</p><p>我使用的是 immortalwrt 版本的固件，里面针对国人做了特殊的优化，且配有好看直接的图形化界面。<a href="https://storage.openwrt.cc/snapshots/targets/bcm27xx/bcm2711/immortalwrt-bcm27xx-bcm2711-rpi-4-ext4-factory.img.gz">下载地址</a></p><p>PS：由于 squashfs 格式为只读，因此 squashfs 版本相比于 ext4 版本多了恢复默认设置的功能</p><h3 id="2-刷入固件"><a href="#2-刷入固件" class="headerlink" title="2.刷入固件"></a>2.刷入固件</h3><p>使用 balenaEtcher 将下载好的固件刷入 tf 卡中。</p><h3 id="3-旁路由设置"><a href="#3-旁路由设置" class="headerlink" title="3.旁路由设置"></a>3.旁路由设置</h3><p>1）启动树莓派，并用网线连接树莓派和电脑（可以不连，带有 wifi 功能的软路由设备会产生一个 Openwrt 的热点，直接连接这个热点也行）。</p><p>2）用浏览器打开<a href="192.168.1.1">192.168.1.1</a>，用户名 root，密码 password（具体根据你下载的固件给的用户名和密码），登录 OpenWrt 管理界面，如下图。</p><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202202220231621.png" alt="image-20220222023144565"></p><p>3）进入网络——接口，点击 lan（eth0）的修改按键，操作流程如下：</p><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202202220234628.png" alt="image-20220222023455597"></p><p>修改如下：</p><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202202220239132.png" alt="image-20220222023902107"></p><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202202220241050.png" alt="image-20220222024110029"></p><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202202220242854.png" alt="image-20220222024215827"></p><p>修改点：</p><ol><li>设置旁路由 ip 及网关 ip</li><li>关闭桥接</li><li>关闭旁路由 dhcp</li></ol><p><strong>然后点击右下角保存并应用，不用等待，直接进行下一步</strong></p><p>4）更改电脑 ip，使其与旁路由在同一网段</p><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202202220246753.png" alt="image-20220222024614711"></p><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202202220247783.png" alt="image-20220222024737745"></p><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202202220248962.png" alt="image-20220222024809929"></p><p><strong>点击应用</strong>，此时电脑与旁路由在同一网段。</p><p>5）浏览器打开<a href="192.168.2.2">192.168.2.2(旁路由 ip 地址)</a>，再次进入 OpenWrt 管理界面。进行如下设置，然后点击保存与应用即可</p><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202202220252980.png" alt="image-20220222025219950"></p><p>ip 动态伪装即位 wan 口的 nat 设置</p><p>6）用网线将树莓派与主路由 lan 口连接</p><h3 id="4-移动设备设置"><a href="#4-移动设备设置" class="headerlink" title="4.移动设备设置"></a>4.移动设备设置</h3><p>移动设备（手机、电脑等）连接主路由的 wifi，进行如下设置</p><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202202220309915.png" alt="image-20220222030900876"></p><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202202220307074.png" alt="image-20220222030726985"></p><p>修改点：</p><ol><li>配置 ip 为手动，ip 地址随意设置（与主路由同一网段，且无冲突即可），路由器设为旁路由 ip</li><li>设置 dns 服务器为旁路由 ip 地址</li></ol><h2 id="五、安装完成"><a href="#五、安装完成" class="headerlink" title="五、安装完成"></a>五、安装完成</h2><p>此时安装已经完成。即使旁路由宕机也不会造成主路由网络的无法使用，只会影响进行更改过的设备。</p>]]></content>
      
      
      <categories>
          
          <category> experiment </category>
          
          <category> openwrt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenWrt </tag>
            
            <tag> 旁路由 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>残差神经网络 ResNet</title>
      <link href="/can-chai-shen-jing-wang-luo-resnet/2022/02/07/"/>
      <url>/can-chai-shen-jing-wang-luo-resnet/2022/02/07/</url>
      
        <content type="html"><![CDATA[<h1 id="残差神经网络-ResNet"><a href="#残差神经网络-ResNet" class="headerlink" title="残差神经网络 ResNet"></a>残差神经网络 ResNet</h1><p>论文地址：<a href="https://arxiv.org/abs/1512.03385">Deep Residual Learning for Image Recognition</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>残差神经网络的主要贡献是发现了退化现象，并针对退化现象发明了Shortcut Connection（快捷连接），极大的消除了深度过大的神经网络训练困难的问题。</p><h2 id="”网络越深，准确率越高“"><a href="#”网络越深，准确率越高“" class="headerlink" title="”网络越深，准确率越高“"></a>”网络越深，准确率越高“</h2><p>通过AlexNet、VGGNet、Inception的层数不断的加大，验证了一个信念——网络越深，准确率越高。</p><p>这个信念在直觉上是正确的，因为网络越深，参与拟合的神经元数量越多，从而能够更加的拟合复杂问题。</p><p>从理论上来说，假设一个层数较少的神经网络已经达到了比较高的准确率，我们在这个神经网络之后拼接一段恒等变换（identity mapping）的网络层，即该网络层原样返回输入（y&#x3D;x），就能加深网络，并且深度较大的网络的准确率等于拼接之前的神经网络。因此，准确率只会增加，而不会减小。</p><h2 id="退化现象"><a href="#退化现象" class="headerlink" title="退化现象"></a>退化现象</h2><p>通过实验，发现浅层网络的错误率始终低于深层网络。</p><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202201241053358.png" alt="image-20220124105359300"></p><p>这个现象与“网络越深，准确率越高”的信念产生了矛盾。ResNet团队将其称为退化（Degradation）。</p><p>产生退化现象的原因是<strong>深层神经网络难以实现恒等变换</strong>。为什么能够拟合复杂函数的深层神经网络现在无法实现恒等变换这种简单映射？</p><p>深度学习有一个关键特征是非线性转换（激活层），它将数据映射到高维空间，并且切断了数据之间的相关性，使得数据被映射到更加离散的空间，此时难以让数据回到原来的地方。也就是说，神经网络将这些数据映射回原来的地方所需要的数据量，已经远远超过我们能够承受的范围。</p><h2 id="ResNet网络架构"><a href="#ResNet网络架构" class="headerlink" title="ResNet网络架构"></a>ResNet网络架构</h2><p>如何解决退化现象呢？</p><p>ResNet团队通过构建带有Shortcut Connection的网络块来消除退化现象。</p><p>下图展示了两种resnet—block。其中左图称为BasicBlock，右图称为Bottleneck。<strong>相比于左图结构，右图结构所需的参数量更加的少，适用于深层网络</strong>。</p><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202201241142048.png" alt="image-20220124114212005"></p><p>ResNet网络就是通过组合这种模块及其他层，解决了深层次网络退化问题。</p><p>下图为一种ResNet模型架构图</p><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202201241219288.png" alt="image-20220124121953244"></p><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202201241225127.png" alt="image-20220124122508097"></p><p>PS：ResNet34中的34指的是网络中<strong>卷积层和全连接层</strong>的层数，激活层或池化层并没有计算在内。</p><h2 id="理解残差"><a href="#理解残差" class="headerlink" title="理解残差"></a>理解残差</h2><p>参考<a href="https://blog.csdn.net/sunny_yeah_/article/details/89430124">https://blog.csdn.net/sunny_yeah_/article/details/89430124</a></p><p>根据实验证明，深层神经网络会出现退化现象。因此，当某个较浅的神经网络已经达到最优状态时，继续增加网络的深度反而会使得网络退化。</p><p>而ResNet解决了这个问题，它将我们求解的问题变成$H(x)&#x3D;F(x)+x$，此时F(x)即为上一层特征映射与当前层特征映射的差值。</p><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202201241249236.png" alt="image-20220124124900198"></p><p>当到达极限状态，即x已经无穷趋近于真实分布时，只需F(x)为0即可。</p><p>而一般的卷积层很难拟合等值变换，即当上层网络已经成功拟合真实分布时，该层网络很难输出和上层网络的相同输出。</p><h2 id="Pytorch实现"><a href="#Pytorch实现" class="headerlink" title="Pytorch实现"></a>Pytorch实现</h2><p>实现可以参考源码和<a href="https://blog.csdn.net/winycg/article/details/86709991">这篇博客</a></p><p>PS：当输入和输出channel数不相等时，可以采用补0和1x1卷积提升维度</p><p>规律：</p><ul><li>卷积层主要是3×3卷积</li><li>不使用dropout，全部使用BN</li><li>对于相同的输出特征图大小的层，即同一stage，具有相同数量的3x3滤波器;</li><li>当feature map大小降低一半时，feature map的数量增加一倍，这保持了网络层的复杂度。</li><li>每个stage通过步长为2的卷积层执行下采样（downsample），而却这个下采样只会在每一个stage的第一个卷积完成，有且仅有一次。</li><li>网络以全局平均池化层和softmax的1000路全连接层结束。</li></ul>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deep learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SENet</title>
      <link href="/senet/2022/02/07/"/>
      <url>/senet/2022/02/07/</url>
      
        <content type="html"><![CDATA[<h1 id="SENet"><a href="#SENet" class="headerlink" title="SENet"></a>SENet</h1><p>论文地址：<a href="https://arxiv.org/abs/1709.01507">Squeeze-and-Excitation Networks</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>SENet（Squeeze-and-Excitation Networks）考虑<strong>特征通道之间的相互依赖关系</strong>，采用Squeeze和Excitation两个关键操作，创造了一种全新的“特征重标定”策略，提高了网络性能。</p><h2 id="特征重标定策略"><a href="#特征重标定策略" class="headerlink" title="特征重标定策略"></a>特征重标定策略</h2><p>通过学习的方式来自动获取到每个特征通道的重要程度，然后依照这个重要程度去提升有用的特征并抑制对当前任务用处不大的特征。</p><p>步骤：</p><ul><li><p>Squeeze</p><p>通过特征压缩将每个二维的特征通道变成一个实数，这个实数在某种程度上具有全局的感受野，它表征着在特征通道上响应的全局分布，而且使得靠近输入的层也可以获得全局的感受野。</p></li><li><p>Excitation</p><p>通过参数来为每个特征通道生成权重，其中参数被学习用来显式地建模特征通道间的相关性。</p></li><li><p>Reweight</p><p>将Excitation的输出的权重看做是进过特征选择后的每个特征通道的重要性，然后通过乘法逐通道加权到先前的特征上，完成在通道维度上的对原始特征的重标定。</p></li></ul><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202201250109413.png" alt="image-20220125010904323"></p><h2 id="SE模块"><a href="#SE模块" class="headerlink" title="SE模块"></a>SE模块</h2><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202201250110702.png" alt="image-20220125011047662"></p><p>上左图是将SE模块嵌入到Inception结构的一个示例。</p><p>使用global average pooling作为Squeeze操作。</p><p>紧接着两个Fully Connected 层组成一个Bottleneck结构去建模通道间的相关性，并输出和输入特征同样数目的权重。我们首先将特征维度降低到输入的1&#x2F;16，然后经过ReLu激活后再通过一个Fully Connected 层升回到原来的维度。</p><p>这样做比直接用一个Fully Connected层的好处在于：1）具有更多的非线性，可以更好地拟合通道间复杂的相关性；</p><p>2）极大地减少了参数量和计算量。</p><p>然后通过一个Sigmoid的门获得0~1之间归一化的权重。最后通过一个Scale的操作来将归一化后的权重加权到每个通道的特征上。</p><h2 id="SE实现注意力机制原因"><a href="#SE实现注意力机制原因" class="headerlink" title="SE实现注意力机制原因"></a>SE实现注意力机制原因</h2><p>SE可以实现注意力机制最重要的两个地方一个是<strong>全连接层</strong>，另一个是<strong>相乘特征融合</strong>。<br><strong>假设输入图像H×W×C，通过global pooling+FC层，拉伸成1×1×C，然后再与原图像相乘，将每个通道赋予权重</strong>。在去噪任务中，将每个噪声点赋予权重，自动去除低权重的噪声点，保留高权重噪声点，提高网络运行时间，减少参数计算。这也就是SE模块具有attention机制的原因。</p><h2 id="Pytorch代码简易实现SE-Inception-Module"><a href="#Pytorch代码简易实现SE-Inception-Module" class="headerlink" title="Pytorch代码简易实现SE-Inception Module"></a>Pytorch代码简易实现SE-Inception Module</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SE</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_channels<span class="token punctuation">,</span> <span class="token builtin">reduce</span><span class="token operator">=</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>SE<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>in_channels <span class="token operator">=</span> in_channels        self<span class="token punctuation">.</span>squeeze <span class="token operator">=</span> nn<span class="token punctuation">.</span>AdaptiveAvgPool2D<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>excitation <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> in_channels <span class="token operator">//</span> <span class="token builtin">reduce</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span>in_channels <span class="token operator">//</span> <span class="token builtin">reduce</span><span class="token punctuation">,</span> in_channels<span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Sigmoid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>squeeze<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> torch<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>in_channels<span class="token punctuation">)</span><span class="token punctuation">)</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>excitation<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        x <span class="token operator">=</span> torch<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>in_channels<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> x <span class="token operator">*</span> <span class="token builtin">input</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deep learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聚类分析之种子数据集</title>
      <link href="/ju-lei-fen-xi-zhi-chong-zi-shu-ju-ji/2021/12/27/"/>
      <url>/ju-lei-fen-xi-zhi-chong-zi-shu-ju-ji/2021/12/27/</url>
      
        <content type="html"><![CDATA[<h1 id="聚类分析之种子数据集"><a href="#聚类分析之种子数据集" class="headerlink" title="聚类分析之种子数据集"></a>聚类分析之种子数据集</h1><p><a href="https://github.com/lgds-01/seeds_kdd/tree/master">完整代码在这</a></p><p>[toc]</p><h2 id="一、数据集介绍"><a href="#一、数据集介绍" class="headerlink" title="一、数据集介绍"></a>一、数据集介绍</h2><p>数据集采用<a href="http://archive.ics.uci.edu/ml/datasets/seeds#">UCI的Seeds Data Set</a>（关于小麦品种的籽粒数据集）其中包含210条数据，每条数据由7个属性外加1个类别组成，数据集总共分为3类。</p><p>七个属性分别如下：</p><ol><li>面积 A</li><li>周长 P</li><li>紧密度 $C &#x3D; 4<em>pi</em>A&#x2F;P^2$</li><li>籽粒长度</li><li>籽粒宽度</li><li>不对称系数</li><li>仁槽长度</li></ol><h2 id="二、数据集研究与处理"><a href="#二、数据集研究与处理" class="headerlink" title="二、数据集研究与处理"></a>二、数据集研究与处理</h2><p>使用pandas库对数据集进行研究与预处理</p><p>ps：网站上的某些格式问题，需要手动调整一下格式</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata_filename <span class="token operator">=</span> <span class="token string">"seeds_dataset.txt"</span>data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>data_filename<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">"\t"</span><span class="token punctuation">,</span> header<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>columns <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">"area A"</span><span class="token punctuation">,</span>    <span class="token string">"perimeter P"</span><span class="token punctuation">,</span>    <span class="token string">"compactness C"</span><span class="token punctuation">,</span>    <span class="token string">"length of kernel"</span><span class="token punctuation">,</span>    <span class="token string">"width of kernel"</span><span class="token punctuation">,</span>    <span class="token string">"asymmetry coefficient"</span><span class="token punctuation">,</span>    <span class="token string">"length of kernel groove"</span><span class="token punctuation">,</span>    <span class="token string">"class"</span><span class="token punctuation">,</span><span class="token punctuation">]</span>dataset <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>data<span class="token operator">=</span>data<span class="token punctuation">.</span>values<span class="token punctuation">,</span> columns<span class="token operator">=</span>columns<span class="token punctuation">)</span><span class="token comment"># 新增id属性列</span>dataset<span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>dataset<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看各个属性分类的统计学特征</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> column <span class="token keyword">in</span> columns<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>column <span class="token operator">+</span> <span class="token string">":"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>dataset<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>column<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"--------------------------------------------------"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>area A:       count       mean       std    min      25%     50%      75%    maxclass                                                                    1.0     70.0  14.334429  1.215704  11.23  13.7500  14.355  15.0450  17.082.0     70.0  18.334286  1.439496  15.38  17.3300  18.720  19.1375  21.183.0     70.0  11.873857  0.723004  10.59  11.2625  11.835  12.4250  13.37--------------------------------------------------perimeter P:       count       mean       std    min      25%    50%      75%    maxclass                                                                   1.0     70.0  14.294286  0.576583  12.63  13.9600  14.32  14.7325  15.462.0     70.0  16.135714  0.616995  14.66  15.7375  16.21  16.5575  17.253.0     70.0  13.247857  0.340196  12.41  13.0025  13.25  13.4700  13.95--------------------------------------------------compactness C:       count      mean       std     min       25%      50%       75%     maxclass                                                                        1.0     70.0  0.880070  0.016191  0.8392  0.868850  0.88050  0.890400  0.91832.0     70.0  0.883517  0.015500  0.8452  0.872525  0.88260  0.898225  0.91083.0     70.0  0.849409  0.021760  0.8081  0.834000  0.84935  0.861825  0.8977--------------------------------------------------length of kernel:       count      mean       std    min      25%     50%      75%    maxclass                                                                   1.0     70.0  5.508057  0.231508  4.902  5.38450  5.5340  5.67700  6.0532.0     70.0  6.148029  0.268191  5.363  5.97925  6.1485  6.31200  6.6753.0     70.0  5.229514  0.138015  4.899  5.13625  5.2240  5.32375  5.541--------------------------------------------------width of kernel:       count      mean       std    min      25%     50%      75%    maxclass                                                                   1.0     70.0  3.244629  0.177616  2.850  3.13425  3.2435  3.37850  3.6832.0     70.0  3.677414  0.185539  3.231  3.55425  3.6935  3.80475  4.0333.0     70.0  2.853771  0.147516  2.630  2.72550  2.8345  2.96700  3.232--------------------------------------------------</code></pre><h3 id="使用t-SNE可视化数据集"><a href="#使用t-SNE可视化数据集" class="headerlink" title="使用t-SNE可视化数据集"></a>使用t-SNE可视化数据集</h3><p>t-SNE能够将高维数据降维，从而能够更好的可视化高维数据的分布情况</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>manifold <span class="token keyword">import</span> TSNE<span class="token operator">%</span>matplotlib inline<span class="token keyword">def</span> <span class="token function">plot_tsne</span><span class="token punctuation">(</span>X<span class="token punctuation">,</span> label<span class="token punctuation">,</span> title<span class="token punctuation">)</span><span class="token punctuation">:</span>    tsne <span class="token operator">=</span> TSNE<span class="token punctuation">(</span>n_components<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> learning_rate<span class="token operator">=</span><span class="token string">'auto'</span><span class="token punctuation">,</span> init<span class="token operator">=</span><span class="token string">'pca'</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> tsne<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>X<span class="token punctuation">)</span>    datas <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"x"</span><span class="token punctuation">:</span> res<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"y"</span><span class="token punctuation">:</span> res<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"label"</span><span class="token punctuation">:</span> label<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span>    markers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'*'</span><span class="token punctuation">,</span> <span class="token string">'h'</span><span class="token punctuation">,</span> <span class="token string">'8'</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> _<span class="token punctuation">,</span> item <span class="token keyword">in</span> datas<span class="token punctuation">.</span>iterrows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> label <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'brg'</span><span class="token punctuation">,</span> s<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> marker<span class="token operator">=</span>markers<span class="token punctuation">[</span>label <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token operator">=</span>colors<span class="token punctuation">[</span>label <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.65</span><span class="token punctuation">)</span>        plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>title<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">plot_tsne<span class="token punctuation">(</span>dataset<span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dataset<span class="token punctuation">.</span>values<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"raw_t_sne"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202112271501222.png" alt="png"></p><p>可以看出，数据集呈现一定的类别分布，分布有一定的重合。</p><h2 id="三、K-Means算法实现"><a href="#三、K-Means算法实现" class="headerlink" title="三、K-Means算法实现"></a>三、K-Means算法实现</h2><p>在sci-learn包中已经有K-Means算法的实现，但是为了更加了解算法，重新实现该算法。<br>具体步骤：</p><ol><li>随机选取index个样本点作为初始聚类中心</li><li>计算样本到每个聚类中心的距离，将该样本指派到与其最近的聚类中心的类去。</li><li>对于聚类结果，计算当前类中各个样本的均值作为新的聚类中心。</li><li>如果迭代收敛(新旧聚类中心不变)或符合迭代条件，输出并结束；否则，继续回到步（2）。</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment"># 使用欧几里得距离</span><span class="token keyword">def</span> <span class="token function">cal_distance</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> x2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">k_means</span><span class="token punctuation">(</span>datas<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>    centers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    n_datas <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>datas<span class="token punctuation">)</span>    <span class="token comment"># 1. 随机选取index个样本点作为初始聚类中心</span>    <span class="token keyword">for</span> idx<span class="token punctuation">,</span> index <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>n_datas<span class="token punctuation">)</span><span class="token punctuation">,</span> size<span class="token operator">=</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        centers<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> datas<span class="token punctuation">[</span>index<span class="token punctuation">]</span>    pre_centers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        clusters <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>            clusters<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment"># 2. 计算样本到每个聚类中心的距离，将该样本指派到与其最近的聚类中心的类去。</span>        <span class="token keyword">for</span> data <span class="token keyword">in</span> datas<span class="token punctuation">:</span>            distances <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> idx <span class="token keyword">in</span> centers<span class="token punctuation">:</span>                distances<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cal_distance<span class="token punctuation">(</span>centers<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span>            clusters<span class="token punctuation">[</span>np<span class="token punctuation">.</span>argmin<span class="token punctuation">(</span>distances<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        pre_centers <span class="token operator">=</span> centers<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 3. 对于聚类结果，计算当前类中各个样本的均值作为新的聚类中心。</span>        <span class="token keyword">for</span> idx <span class="token keyword">in</span> clusters<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            centers<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>clusters<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        is_terminal <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token comment"># 4. 如果迭代收敛(新旧聚类中心不变)或符合迭代条件，输出并结束；否则，继续回到步（2）。</span>        <span class="token keyword">for</span> idx <span class="token keyword">in</span> centers<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cal_distance<span class="token punctuation">(</span>pre_centers<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">,</span> centers<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1e-8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                is_terminal <span class="token operator">=</span> <span class="token boolean">False</span>                <span class="token keyword">break</span>            is_terminal <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">if</span> is_terminal<span class="token punctuation">:</span>            <span class="token keyword">break</span>    <span class="token keyword">return</span> centers<span class="token punctuation">,</span> clusters<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、聚类分析"><a href="#四、聚类分析" class="headerlink" title="四、聚类分析"></a>四、聚类分析</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python">centers<span class="token punctuation">,</span> clusters <span class="token operator">=</span> k_means<span class="token punctuation">(</span>dataset<span class="token punctuation">.</span>values<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>class1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>clusters<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>class2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>clusters<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>class3 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>clusters<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 分类构造数据</span>class1 <span class="token operator">=</span> np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">(</span>class1<span class="token punctuation">,</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span>class1<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>class2 <span class="token operator">=</span> np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">(</span>class2<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span>class2<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>class3 <span class="token operator">=</span> np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">(</span>class3<span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span>class3<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 构造聚类后数据集</span>data <span class="token operator">=</span> np<span class="token punctuation">.</span>vstack<span class="token punctuation">(</span><span class="token punctuation">(</span>class1<span class="token punctuation">,</span> class2<span class="token punctuation">,</span> class3<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="可视化聚类结果"><a href="#可视化聚类结果" class="headerlink" title="可视化聚类结果"></a>可视化聚类结果</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">plot_tsne<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"kmeans_t-sne"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>/Users/lgds/opt/anaconda3/envs/pytorch/lib/python3.7/site-packages/sklearn/manifold/_t_sne.py:986: FutureWarning: The PCA initialization in TSNE will change to have the standard deviation of PC1 equal to 1e-4 in 1.2. This will ensure better convergence.  FutureWarning,</code></pre><p><img src="https://img-1305492272.cos.ap-shanghai.myqcloud.com/mac_img/202112271501228.png" alt="png"></p><h3 id="聚类结果评估"><a href="#聚类结果评估" class="headerlink" title="聚类结果评估"></a>聚类结果评估</h3><p>因为数据集提供了真实类别，因此可以采用调整兰德指数(Adjusted Rand index, ARI)，对聚类结果进行评估</p><blockquote><p>假设U为外部评价，V是聚类结果，定义如下统计量:<br>TP 在U中为同一类，且在V中也为同一类别的数据点对数<br>TN 在U中不在同一类，且在V中也不属于同一类别的数据点对数<br>FP 在U中不在同一类，但在V中维同一类的数据点对数<br>FN 在U中为同一类，但在V中却隶属于不同类别的数据点对数<br>从而定义$RI(Rand Index)&#x3D;\frac{TP+TN}{TP+FP+TN+FN}$<br>$ARI&#x3D;\frac{RI-E(RI)}{max(RI)-E(RI)},ARI\in [-1,1]$<br>ARI值越大意味着聚类结果接近外部评价</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> adjusted_rand_score<span class="token keyword">def</span> <span class="token function">metric</span><span class="token punctuation">(</span>label_true<span class="token punctuation">,</span> label_pred<span class="token punctuation">)</span><span class="token punctuation">:</span>    score <span class="token operator">=</span> adjusted_rand_score<span class="token punctuation">(</span>label_true<span class="token punctuation">,</span> label_pred<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"ARI得分：&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">metric<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>ARI得分：0.7166198557361053</code></pre><h2 id="五、改进"><a href="#五、改进" class="headerlink" title="五、改进"></a>五、改进</h2><p>由于初始聚类中心的的选择会严重影响K-Means算法的结果，因此可以改进K-Means算法的第一步，从而形成了K-Means++算法。<br>具体步骤：</p><ol><li>在数据集X中随机选择一个样本点作为第一个初始化的聚类中心</li><li>接着计算每个样本与当前已有聚类中心之间的最短距离，用$D(x)$表示；然后计算每个样本点被选为下一个聚类中心的概率$P(x)(P(x)&#x3D;\frac{D(x)^2}{\sum_{x\in X}D(x)^2})$，最后选择最大概率值所对应的样本点作为下一个簇中心</li><li>重复第2步，直到选择出index个聚类中心</li><li>对index个初始化的聚类中心，利用K-Means算法计算最终的聚类中心</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">k_means_pp</span><span class="token punctuation">(</span>datas<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>    centers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    n_datas <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>datas<span class="token punctuation">)</span>    <span class="token comment"># 在数据集X中随机选择一个样本点作为第一个初始化的聚类中心</span>    <span class="token keyword">for</span> idx<span class="token punctuation">,</span> index <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>n_datas<span class="token punctuation">)</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        centers<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> datas<span class="token punctuation">[</span>index<span class="token punctuation">]</span>    index <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>        Dx2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> data <span class="token keyword">in</span> datas<span class="token punctuation">:</span>            distance <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> idx <span class="token keyword">in</span> centers<span class="token punctuation">:</span>                <span class="token comment"># 计算每个样本与当前已有聚类中心之间的最短距离的平方</span>                distance<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cal_distance<span class="token punctuation">(</span>centers<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span>            Dx2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span>distance<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token comment"># 计算P(x)</span>        Px <span class="token operator">=</span> <span class="token punctuation">[</span>d <span class="token operator">/</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>Dx2<span class="token punctuation">)</span> <span class="token keyword">for</span> d <span class="token keyword">in</span> Dx2<span class="token punctuation">]</span>        <span class="token comment"># 选择P(x)最大的样本点作为中心</span>        centers<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> datas<span class="token punctuation">[</span>np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>Px<span class="token punctuation">)</span><span class="token punctuation">]</span>        index <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment"># 使用K-Means计算聚类中心</span>    pre_centers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        clusters <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>            clusters<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment"># 2. 计算样本到每个聚类中心的距离，将该样本指派到与其最近的聚类中心的类去。</span>        <span class="token keyword">for</span> data <span class="token keyword">in</span> datas<span class="token punctuation">:</span>            distances <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> idx <span class="token keyword">in</span> centers<span class="token punctuation">:</span>                distances<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cal_distance<span class="token punctuation">(</span>centers<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span>            clusters<span class="token punctuation">[</span>np<span class="token punctuation">.</span>argmin<span class="token punctuation">(</span>distances<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        pre_centers <span class="token operator">=</span> centers<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 3. 对于聚类结果，计算当前类中各个样本的均值作为新的聚类中心。</span>        <span class="token keyword">for</span> idx <span class="token keyword">in</span> clusters<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            centers<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>clusters<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        is_terminal <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token comment"># 4. 如果迭代收敛(新旧聚类中心不变)或符合迭代条件，输出并结束；否则，继续回到步（2）。</span>        <span class="token keyword">for</span> idx <span class="token keyword">in</span> centers<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cal_distance<span class="token punctuation">(</span>pre_centers<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">,</span> centers<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1e-8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                is_terminal <span class="token operator">=</span> <span class="token boolean">False</span>                <span class="token keyword">break</span>            is_terminal <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">if</span> is_terminal<span class="token punctuation">:</span>            <span class="token keyword">break</span>    <span class="token keyword">return</span> centers<span class="token punctuation">,</span> clusters<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">centers_p<span class="token punctuation">,</span> clusters_p <span class="token operator">=</span> k_means_pp<span class="token punctuation">(</span>dataset<span class="token punctuation">.</span>values<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>class1_p <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>clusters_p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>class2_p <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>clusters_p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>class3_p <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>clusters_p<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 分类构造数据</span>class1_p <span class="token operator">=</span> np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">(</span>class1_p<span class="token punctuation">,</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span>class1_p<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>class2_p <span class="token operator">=</span> np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">(</span>class2_p<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span>class2_p<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>class3_p <span class="token operator">=</span> np<span class="token punctuation">.</span>hstack<span class="token punctuation">(</span><span class="token punctuation">(</span>class3_p<span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">*</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span>class3_p<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 构造聚类后数据集</span>data_p <span class="token operator">=</span> np<span class="token punctuation">.</span>vstack<span class="token punctuation">(</span><span class="token punctuation">(</span>class1_p<span class="token punctuation">,</span> class2_p<span class="token punctuation">,</span> class3_p<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可视化聚类结果，计算ARI</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">plot_tsne<span class="token punctuation">(</span>data_p<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data_p<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"kmeanspp_t-sne"</span><span class="token punctuation">)</span>metric<span class="token punctuation">(</span>data_p<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data_p<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre><code>ARI得分：0.7103417092680225</code></pre><p><img src="/output_23_2.png" alt="png"></p><h2 id="六、输出聚类结果"><a href="#六、输出聚类结果" class="headerlink" title="六、输出聚类结果"></a>六、输出聚类结果</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"使用K-Means算法:"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"class1 大小为:&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>class1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"id分别为&#123;"</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token builtin">id</span> <span class="token keyword">in</span> class1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;,"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#125;"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"class2 大小为:&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>class2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"id分别为&#123;"</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token builtin">id</span> <span class="token keyword">in</span> class2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;,"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#125;"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"class3 大小为:&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>class3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"id分别为&#123;"</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token builtin">id</span> <span class="token keyword">in</span> class3<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;,"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#125;"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>使用K-Means算法class1 大小为:61id分别为&#123;37,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,123,125,126,127,128,129,130,131,136,&#125;class2 大小为:72id分别为&#123;0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,20,21,22,23,24,25,27,28,29,30,31,32,33,34,35,36,38,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,64,65,66,67,68,100,122,124,132,133,134,135,137,138,139,179,201,&#125;class3 大小为:77id分别为&#123;16,19,26,39,60,61,62,63,69,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,202,203,204,205,206,207,208,209,&#125;</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"使用K-Means++算法:"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"class1 大小为:&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>class1_p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"id分别为&#123;"</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token builtin">id</span> <span class="token keyword">in</span> class1_p<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;,"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#125;"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"class2 大小为:&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>class2_p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"id分别为&#123;"</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token builtin">id</span> <span class="token keyword">in</span> class2_p<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;,"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#125;"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"class3 大小为:&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>class3_p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"id分别为&#123;"</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token builtin">id</span> <span class="token keyword">in</span> class3_p<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;,"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#125;"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>使用K-Means++算法:class1 大小为:61id分别为&#123;37,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,123,125,126,127,128,129,130,131,136,&#125;class2 大小为:82id分别为&#123;16,19,23,26,27,39,59,60,61,62,63,69,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,&#125;class3 大小为:67id分别为&#123;0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,20,21,22,24,25,28,29,30,31,32,33,34,35,36,38,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,64,65,66,67,68,100,122,124,132,133,134,135,137,138,139,&#125;</code></pre><h2 id="七、思考"><a href="#七、思考" class="headerlink" title="七、思考"></a>七、思考</h2><ol><li>根据数据集真实标签产生的可视化图像可知，数据集虽然有较为明显的三个聚类分布，但聚类之间有部分重合，因此对于聚类算法的结果与真实结果可能有较大偏差。两个算法的ARI结果都在0.7左右，验证了这一点。</li><li>K-Means++主要是为了改进K-Means随机选择初始可能导致陷入局部最优的情况，而这种情况在此次聚类中并没有出现，因此两个算法的结果表现出一定的相似性</li><li>此数据集有7个属性，而这7个属性之间有一定的重复，如籽粒长度、籽粒宽度和面积，并且不同属性对于不同类的增益程度不同，因此可以考虑对属性乘以权重（用于突出不同属性对不同类的重要程度&#x2F;增益效果）</li></ol>]]></content>
      
      
      <categories>
          
          <category> experiment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cluster </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派安装ubuntu系统并更新apt源</title>
      <link href="/shu-mei-pai-an-zhuang-ubuntu-xi-tong-bing-geng-xin-apt-yuan/2021/12/24/"/>
      <url>/shu-mei-pai-an-zhuang-ubuntu-xi-tong-bing-geng-xin-apt-yuan/2021/12/24/</url>
      
        <content type="html"><![CDATA[<h1 id="树莓派安装-ubuntu-系统并更新-apt-源"><a href="#树莓派安装-ubuntu-系统并更新-apt-源" class="headerlink" title="树莓派安装 ubuntu 系统并更新 apt 源"></a>树莓派安装 ubuntu 系统并更新 apt 源</h1><h2 id="1-下载-ubuntu-系统"><a href="#1-下载-ubuntu-系统" class="headerlink" title="1.下载 ubuntu 系统"></a>1.下载 ubuntu 系统</h2><p><a href="https://ubuntu.com/download/raspberry-pi/thank-you?version=20.04.3&architecture=server-arm64+raspi#:~:text=If%20it%20doesn%E2%80%99t%2C-,download%20now,-.">Ubuntu 20.04 64bit for Raspberry Pi 下载地址</a></p><h2 id="2-使用镜像烧录工具将系统写入-tf-卡"><a href="#2-使用镜像烧录工具将系统写入-tf-卡" class="headerlink" title="2.使用镜像烧录工具将系统写入 tf 卡"></a>2.使用镜像烧录工具将系统写入 tf 卡</h2><p>使用 balenaEtcher 将下载好的系统写入 tf 卡</p><p>ps：随意使用任何镜像烧录工具即可</p><h2 id="3-设置网络"><a href="#3-设置网络" class="headerlink" title="3.设置网络"></a>3.设置网络</h2><p>编辑 system-boot&#x2F;network-config 文件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">version: <span class="token number">2</span>ethernets:eth0:  dhcp4: <span class="token boolean">true</span>  optional: <span class="token boolean">true</span>wifis:  wlan0:  dhcp4: <span class="token boolean">true</span>  optional: <span class="token boolean">true</span>  access-points:    <span class="token string">"wifi-name"</span><span class="token builtin class-name">:</span>      password: <span class="token string">"wifi-password"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://pic1.zhimg.com/80/v2-14e3f5052c0c3bde03e4b5a89bc3d528_1440w.jpg"></a></p><p>将 wifi-name 与 wifi-password 更改为自己的 wifi 名称与 wifi 密码</p><h2 id="4-启动-raspberry-pi-并使用-ssh-连接"><a href="#4-启动-raspberry-pi-并使用-ssh-连接" class="headerlink" title="4.启动 raspberry pi 并使用 ssh 连接"></a>4.启动 raspberry pi 并使用 ssh 连接</h2><p>首先需要在路由器管理后台查看<strong>名称为 ubuntu</strong>设备的 ip 地址</p><p>然后使用 ssh 连接</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> ubuntu@ip_addr<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>默认密码为 ubuntu</strong>，第一次登录会强制更改密码</p><h2 id="5-更新-apt-源"><a href="#5-更新-apt-源" class="headerlink" title="5.更新 apt 源"></a>5.更新 apt 源</h2><p>参考<a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu-ports/">清华开源软件镜像站使用帮助</a></p><p>由于 raspberry pi 是 arm 架构，因此需要<strong>使用 Ubuntu Ports 镜像</strong>（包含 arm64 armhf ppc64el riscv64 s390x 架构的软件包）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-updates main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-backports main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu-ports/ focal-security main restricted universe multiverse<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后使用命令<code>sudo apt update</code>更新软件列表</p><p>使用命令<code>sudo apt upgrade</code>更新软件</p><p>PS：</p><ul><li><p>若出现<code>gpg: keyserver receive failed: Server indicated a failure</code>错误，则使用下述命令</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 5DC22404A6F9F1CA<span class="token punctuation">(</span>报错的公钥值<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>若出现 CA 认证错误，则将所有的 https 改为 http</p></li><li><p>若以上问题没有解决，可尝试更改 dns 解析</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/resolv.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更改为以下内容：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">nameserver <span class="token number">114.114</span>.114.114nameserver <span class="token number">127.0</span>.0.53<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> experiment </category>
          
          <category> raspberry pi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> raspberry pi </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mongoose连接docker中Mongo数据库</title>
      <link href="/mongoose-lian-jie-docker-zhong-mongo-shu-ju-ku/2021/12/21/"/>
      <url>/mongoose-lian-jie-docker-zhong-mongo-shu-ju-ku/2021/12/21/</url>
      
        <content type="html"><![CDATA[<h1 id="Mongoose连接docker中Mongo数据库"><a href="#Mongoose连接docker中Mongo数据库" class="headerlink" title="Mongoose连接docker中Mongo数据库"></a>Mongoose连接docker中Mongo数据库</h1><h2 id="docker中搭建mongo容器"><a href="#docker中搭建mongo容器" class="headerlink" title="docker中搭建mongo容器"></a>docker中搭建mongo容器</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 拉取mongo镜像</span><span class="token function">sudo</span> <span class="token function">docker</span> pull mongo <span class="token comment"># 创建mongo容器</span><span class="token function">sudo</span> <span class="token function">docker</span> run --name<span class="token operator">=</span>mongodb -p <span class="token number">9001</span>:27017 mongo<span class="token comment"># 进入mongo容器</span><span class="token function">sudo</span> <span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it mongodb mongo<span class="token comment"># 新建数据库</span>use library<span class="token comment"># 创建users集合并插入测试数据</span>db.users.insert<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>username:<span class="token string">"test"</span>,password:<span class="token string">"test"</span>,mailbox:<span class="token string">"test"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># 查看此时users集合中的所有记录</span>db.users.find<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="本地连接mongo容器"><a href="#本地连接mongo容器" class="headerlink" title="本地连接mongo容器"></a>本地连接mongo容器</h2><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongoose'</span><span class="token punctuation">)</span><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">'mongodb://your server ip/library'</span># 方法一mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> userSchema <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">Schema</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token literal-property property">username</span><span class="token operator">:</span> String<span class="token punctuation">,</span>        <span class="token literal-property property">password</span><span class="token operator">:</span> String<span class="token punctuation">,</span>        <span class="token literal-property property">mailbox</span><span class="token operator">:</span> String<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> query <span class="token operator">=</span> User<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string-property property">"username"</span><span class="token operator">:</span><span class="token string">"test"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    query<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>user</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span># 方法二<span class="token keyword">const</span> mongoose <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mongoose'</span><span class="token punctuation">)</span><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token string">'mongodb://www.lgds.work:9001/library'</span><span class="token keyword">const</span> userSchema <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">Schema</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">username</span><span class="token operator">:</span> String<span class="token punctuation">,</span>    <span class="token literal-property property">password</span><span class="token operator">:</span> String<span class="token punctuation">,</span>    <span class="token literal-property property">mailbox</span><span class="token operator">:</span> String<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">const</span> User <span class="token operator">=</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span>userSchema<span class="token punctuation">,</span><span class="token string">"users"</span><span class="token punctuation">)</span><span class="token keyword">const</span> query <span class="token operator">=</span> User<span class="token punctuation">.</span><span class="token function">findOne</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string-property property">"username"</span><span class="token operator">:</span><span class="token string">"test"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>    query<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span>user</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> experiment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> mongoose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在centos服务器docker中部署mysql并在本地远程访问</title>
      <link href="/zai-centos-fu-wu-qi-docker-zhong-bu-shu-mysql-bing-zai-ben-di-yuan-cheng-fang-wen/2021/12/14/"/>
      <url>/zai-centos-fu-wu-qi-docker-zhong-bu-shu-mysql-bing-zai-ben-di-yuan-cheng-fang-wen/2021/12/14/</url>
      
        <content type="html"><![CDATA[<h3 id="在centos服务器docker中部署mysql并在本地远程访问"><a href="#在centos服务器docker中部署mysql并在本地远程访问" class="headerlink" title="在centos服务器docker中部署mysql并在本地远程访问"></a>在centos服务器docker中部署mysql并在本地远程访问</h3><h4 id="1-拉取mysql镜像"><a href="#1-拉取mysql镜像" class="headerlink" title="1.拉取mysql镜像"></a>1.拉取mysql镜像</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> pull mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-创建mysql容器"><a href="#2-创建mysql容器" class="headerlink" title="2.创建mysql容器"></a>2.创建mysql容器</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> run -itd --name<span class="token operator">=</span>mysql-test -p <span class="token number">9000</span>:3306 -e MYSQL<span class="token punctuation">\</span>_ROOT<span class="token punctuation">\</span>_PASSWORD<span class="token operator">=</span><span class="token number">123456</span> mysql<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>–name&#x3D;容器名字</li><li>-p <strong>服务器端口:容器端口(3306)</strong></li><li>-e 环境变量(root用户密码)</li></ul><h4 id="3-本地远程访问mysql"><a href="#3-本地远程访问mysql" class="headerlink" title="3.本地远程访问mysql"></a>3.本地远程访问mysql</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysql<span class="token keyword">from</span> dbutils<span class="token punctuation">.</span>pooled_db <span class="token keyword">import</span> PooledDBhost <span class="token operator">=</span> <span class="token string">'你的服务器公网ip'</span>port <span class="token operator">=</span> <span class="token number">9000</span>user <span class="token operator">=</span> <span class="token string">'root'</span>passwd <span class="token operator">=</span> <span class="token string">'123456'</span>pool <span class="token operator">=</span> PooledDB<span class="token punctuation">(</span>pymysql<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>host<span class="token operator">=</span>host<span class="token punctuation">,</span>user<span class="token operator">=</span>user<span class="token punctuation">,</span>passwd<span class="token operator">=</span>passwd<span class="token punctuation">,</span>port<span class="token operator">=</span>port<span class="token punctuation">,</span>charset<span class="token operator">=</span><span class="token string">"utf8"</span><span class="token punctuation">)</span>conn <span class="token operator">=</span> pool<span class="token punctuation">.</span>connection<span class="token punctuation">(</span><span class="token punctuation">)</span>cur<span class="token operator">=</span>conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>sql<span class="token operator">=</span><span class="token string">"show databases"</span>cur<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>r<span class="token operator">=</span>cur<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span>cur<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token variable"><span class="token punctuation">((</span>'information_schema'<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>'mysql'<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>'performance_schema'<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>'sys'<span class="token punctuation">,</span><span class="token punctuation">))</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>记得开放对应服务器端口</p>]]></content>
      
      
      <categories>
          
          <category> experiment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> centos </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx(Ubuntu)配置WebSocket，与IOS应用通信全流程</title>
      <link href="/nginx-ubuntu-pei-zhi-websocket-yu-ios-ying-yong-tong-xin-quan-liu-cheng/2021/11/19/"/>
      <url>/nginx-ubuntu-pei-zhi-websocket-yu-ios-ying-yong-tong-xin-quan-liu-cheng/2021/11/19/</url>
      
        <content type="html"><![CDATA[<h3 id="Nginx-Ubuntu-配置WebSocket，与IOS应用通信全流程"><a href="#Nginx-Ubuntu-配置WebSocket，与IOS应用通信全流程" class="headerlink" title="Nginx(Ubuntu)配置WebSocket，与IOS应用通信全流程"></a>Nginx(Ubuntu)配置WebSocket，与IOS应用通信全流程</h3><h4 id="1-开发一个简陋IOS应用"><a href="#1-开发一个简陋IOS应用" class="headerlink" title="1.开发一个简陋IOS应用"></a>1.开发一个简陋IOS应用</h4><p>用SwiftUI随意写了下界面(非常的简陋)，主要是用Starscream来实现websocket通信</p><p>包装了一下WebSocket，并且让其为单例模式</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">//</span><span class="token comment">//  WebSocketManager.swift</span><span class="token comment">//</span><span class="token comment">//  Created by 乐观的神 on 2021/11/19.</span><span class="token comment">//</span><span class="token keyword">import</span> <span class="token class-name">SwiftUI</span><span class="token keyword">import</span> <span class="token class-name">Starscream</span><span class="token keyword">class</span> <span class="token class-name">WebSocketManager</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 单例</span>    <span class="token keyword">static</span> <span class="token keyword">let</span> shared <span class="token operator">=</span> <span class="token class-name">WebSocketManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//socket.delegate = self</span>        <span class="token comment">// NotificationCenter.default.addObserver(self, selector: #selector(onNetworkStatusChange), name: , object: nil)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/// 是否正在连接</span>    <span class="token keyword">var</span> isConnected<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token operator">=</span> <span class="token boolean">false</span>    <span class="token comment">/// socket</span>    <span class="token keyword">var</span> socket <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">WebSocket</span> <span class="token keyword">in</span>        <span class="token keyword">var</span> request <span class="token operator">=</span> <span class="token class-name">URLRequest</span><span class="token punctuation">(</span>url<span class="token punctuation">:</span> <span class="token function">URL</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">"ws://www.lgds.work/lgds"</span></span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">)</span>        request<span class="token punctuation">.</span>timeoutInterval <span class="token operator">=</span> <span class="token number">5</span>        <span class="token keyword">var</span> socket <span class="token operator">=</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span>request<span class="token punctuation">:</span> request<span class="token punctuation">)</span>        <span class="token keyword">return</span> socket    <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">/// 连接服务器</span>    <span class="token keyword">func</span> <span class="token function-definition function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        socket<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/// 断开连接</span>    <span class="token keyword">func</span> <span class="token function-definition function">disConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        socket<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/// 重新连接</span>    <span class="token keyword">func</span> <span class="token function-definition function">reConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>isConnected<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">disConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        socket<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 发送文字信息</span>    <span class="token keyword">func</span> <span class="token function-definition function">sendString</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        socket<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> string<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>ViewModel如下</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">//</span><span class="token comment">//  ViewModel.swift.swift</span><span class="token comment">//</span><span class="token comment">//  Created by 乐观的神 on 2021/11/19.</span><span class="token comment">//</span><span class="token keyword">import</span> <span class="token class-name">Foundation</span><span class="token keyword">class</span> <span class="token class-name">Manager</span><span class="token punctuation">:</span> <span class="token class-name">ObservableObject</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> socketManager <span class="token operator">=</span> <span class="token class-name">WebSocketManager</span><span class="token punctuation">.</span>shared    <span class="token attribute atrule">@Published</span> <span class="token keyword">var</span> isConnected<span class="token punctuation">:</span> <span class="token class-name">Bool</span> <span class="token operator">=</span> <span class="token boolean">false</span>       <span class="token keyword">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        socketManager<span class="token punctuation">.</span>socket<span class="token punctuation">.</span>onEvent <span class="token operator">=</span> <span class="token punctuation">&#123;</span> event <span class="token keyword">in</span>            <span class="token keyword">switch</span> event <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">connected</span><span class="token punctuation">(</span><span class="token keyword">let</span> headers<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">self</span><span class="token punctuation">.</span>isConnected <span class="token operator">=</span> <span class="token boolean">true</span>                    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"websocket is connected: </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">headers</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">disconnected</span><span class="token punctuation">(</span><span class="token keyword">let</span> reason<span class="token punctuation">,</span> <span class="token keyword">let</span> code<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">self</span><span class="token punctuation">.</span>isConnected <span class="token operator">=</span> <span class="token boolean">false</span>                    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"websocket is disconnected: </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">reason</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> with code: </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">code</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token keyword">let</span> string<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token function">print</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span>                <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">binary</span><span class="token punctuation">(</span><span class="token keyword">let</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"Received data: </span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">data<span class="token punctuation">.</span>count</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">ping</span><span class="token punctuation">(</span><span class="token omit keyword">_</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span><span class="token label important">                case</span> <span class="token punctuation">.</span><span class="token function">pong</span><span class="token punctuation">(</span><span class="token omit keyword">_</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span><span class="token label important">                case</span> <span class="token punctuation">.</span><span class="token function">viabilityChanged</span><span class="token punctuation">(</span><span class="token omit keyword">_</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span><span class="token label important">                case</span> <span class="token punctuation">.</span><span class="token function">reconnectSuggested</span><span class="token punctuation">(</span><span class="token omit keyword">_</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span><span class="token label important">                case</span> <span class="token punctuation">.</span>cancelled<span class="token punctuation">:</span>                    <span class="token keyword">self</span><span class="token punctuation">.</span>isConnected <span class="token operator">=</span> <span class="token boolean">false</span>                <span class="token keyword">case</span> <span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token keyword">let</span> error<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">self</span><span class="token punctuation">.</span>isConnected <span class="token operator">=</span> <span class="token boolean">false</span>                    <span class="token comment">//handleError(error)</span>                    <span class="token function">print</span><span class="token punctuation">(</span>error<span class="token operator">?</span><span class="token punctuation">.</span>localizedDescription <span class="token operator">??</span> <span class="token string-literal"><span class="token string">"Unknown Error."</span></span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/// 连接服务器</span>    <span class="token keyword">func</span> <span class="token function-definition function">connectServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        socketManager<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/// 断开连接</span>    <span class="token keyword">func</span> <span class="token function-definition function">disConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        socketManager<span class="token punctuation">.</span><span class="token function">disConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/// 发送消息</span>    <span class="token comment">/// - Parameter string: 消息字符串</span>    <span class="token keyword">func</span> <span class="token function-definition function">sendMessage</span><span class="token punctuation">(</span><span class="token omit keyword">_</span> string<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        socketManager<span class="token punctuation">.</span><span class="token function">sendString</span><span class="token punctuation">(</span>string<span class="token punctuation">:</span> string<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只有一个View，如下</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">//</span><span class="token comment">//  ContentView.swift</span><span class="token comment">//</span><span class="token comment">//  Created by 乐观的神 on 2021/11/19.</span><span class="token comment">//</span><span class="token keyword">import</span> <span class="token class-name">SwiftUI</span><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token attribute atrule">@ObservedObject</span> <span class="token keyword">var</span> manager <span class="token operator">=</span> <span class="token class-name">Manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> horizon <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"0"</span></span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> vetical <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"0"</span></span>    <span class="token attribute atrule">@State</span> <span class="token keyword">private</span> <span class="token keyword">var</span> stop <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"n"</span></span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">VStack</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"connect"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                manager<span class="token punctuation">.</span><span class="token function">connectServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"disconnect"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                manager<span class="token punctuation">.</span><span class="token function">disConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"stop:"</span></span><span class="token punctuation">)</span>                <span class="token class-name">TextField</span><span class="token punctuation">(</span>stop<span class="token punctuation">,</span> text<span class="token punctuation">:</span> $stop<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"h:"</span></span><span class="token punctuation">)</span>                <span class="token class-name">TextField</span><span class="token punctuation">(</span>horizon<span class="token punctuation">,</span> text<span class="token punctuation">:</span> $horizon<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">HStack</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"v:"</span></span><span class="token punctuation">)</span>                <span class="token class-name">TextField</span><span class="token punctuation">(</span>vetical<span class="token punctuation">,</span> text<span class="token punctuation">:</span> $vetical<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"send"</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> manager<span class="token punctuation">.</span>isConnected <span class="token punctuation">&#123;</span>                manager<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token punctuation">(</span>h<span class="token punctuation">:</span> horizon<span class="token punctuation">,</span> v<span class="token punctuation">:</span> vetical<span class="token punctuation">,</span> stop<span class="token punctuation">:</span> stop<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"error"</span></span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">.</span><span class="token function">font</span><span class="token punctuation">(</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">padding</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">struct</span> <span class="token class-name">ContentView_Previews</span><span class="token punctuation">:</span> <span class="token class-name">PreviewProvider</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">var</span> previews<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ContentView</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Model定义了一个Message</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token comment">//</span><span class="token comment">//  Message.swift</span><span class="token comment">//</span><span class="token comment">//  Created by 乐观的神 on 2021/11/19.</span><span class="token comment">//</span><span class="token keyword">import</span> <span class="token class-name">Foundation</span><span class="token keyword">struct</span> <span class="token class-name">Message</span><span class="token punctuation">:</span> <span class="token class-name">Codable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> h <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"0"</span></span>    <span class="token keyword">var</span> v <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"0"</span></span>    <span class="token keyword">var</span> stop <span class="token operator">=</span> <span class="token string-literal"><span class="token string">"y"</span></span>    <span class="token keyword">func</span> <span class="token function-definition function">toJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token keyword">try</span><span class="token operator">!</span> <span class="token class-name">JSONEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">:</span> data<span class="token punctuation">,</span> encoding<span class="token punctuation">:</span> <span class="token punctuation">.</span>utf8<span class="token punctuation">)</span><span class="token operator">!</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-配置nginx"><a href="#2-配置nginx" class="headerlink" title="2.配置nginx"></a>2.配置nginx</h4><p>使用的系统环境是Ubuntu20</p><p>在<code>/etc/nginx/sites-available/default</code>文件中新加一个location，如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">location ^~ /lgds <span class="token punctuation">&#123;</span>                proxy_pass http://127.0.0.1:8011/<span class="token punctuation">;</span>                proxy_redirect off<span class="token punctuation">;</span>                proxy_set_header X-Real-IP <span class="token variable">$remote_addr</span><span class="token punctuation">;</span>                proxy_set_header Host <span class="token variable">$host</span><span class="token punctuation">;</span>                proxy_set_header X-Forwarded-For <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span>                proxy_http_version <span class="token number">1.1</span><span class="token punctuation">;</span>                proxy_set_header Upgrade <span class="token variable">$http_upgrade</span><span class="token punctuation">;</span>                proxy_set_header Connection <span class="token string">"upgrade"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在response头中新增了Upgrade和Connection</p><p><strong>proxy_pass的ip和端口要与服务端程序监听的ip和端口对应</strong></p><p><strong>Tips:Nginx语法很严格，不要用tab对齐，用空格！！！！！！</strong></p><h4 id="3-编写服务端程序"><a href="#3-编写服务端程序" class="headerlink" title="3.编写服务端程序"></a>3.编写服务端程序</h4><p>服务端利用python的websockets库编写，由于要求的功能很简单，只是为了跑通实验，所以就随便找了一份代码，如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> asyncio<span class="token keyword">import</span> websockets<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">echo</span><span class="token punctuation">(</span>websocket<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">async</span> <span class="token keyword">for</span> message <span class="token keyword">in</span> websocket<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>        message <span class="token operator">=</span> <span class="token string">"I got your message: &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>        <span class="token keyword">await</span> websocket<span class="token punctuation">.</span>send<span class="token punctuation">(</span>message<span class="token punctuation">)</span>asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>websockets<span class="token punctuation">.</span>serve<span class="token punctuation">(</span>echo<span class="token punctuation">,</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> <span class="token string">'8011'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>run_forever<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-开始测试"><a href="#4-开始测试" class="headerlink" title="4.开始测试"></a>4.开始测试</h4><p>服务器上运行服务端程序，在ios设备上真机运行那个简陋的app，先connect然后send，服务端效果如下</p><p><img src="https://cdn.jsdelivr.net/gh/lgds-01/picture@main/uPic/image-20211119211449300.png" alt="image-20211119211449300"></p><p>实验成功！</p>]]></content>
      
      
      <categories>
          
          <category> experiment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> websocket </tag>
            
            <tag> ios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树莓派入门初体验</title>
      <link href="/shu-mei-pai-ru-men-chu-ti-yan/2021/11/17/"/>
      <url>/shu-mei-pai-ru-men-chu-ti-yan/2021/11/17/</url>
      
        <content type="html"><![CDATA[<h1 id="树莓派入门初体验"><a href="#树莓派入门初体验" class="headerlink" title="树莓派入门初体验"></a>树莓派入门初体验</h1><h2 id="1-准备的东西"><a href="#1-准备的东西" class="headerlink" title="1.准备的东西"></a>1.准备的东西</h2><p>树莓派的板子、16G以上的tf卡、读卡器、电源以及电脑（我使用Mac）</p><h2 id="2-下载系统镜像并烧录"><a href="#2-下载系统镜像并烧录" class="headerlink" title="2.下载系统镜像并烧录"></a>2.下载系统镜像并烧录</h2><p>去<a href="https://www.raspberrypi.com/software/operating-systems/">树莓派官网</a>下载镜像</p><img src="https://cdn.jsdelivr.net/gh/lgds-01/picture@main/uPic/image-20211117183102224.png" alt="image-20211117183102224" style="zoom:33%;" /><p>一共三种选择，其中前两种带有桌面，能够通过VNC连接到系统桌面。我喜欢命令行界面，因此下载第三个lite镜像（它是真的小）</p><p>下载完成后使用balenaEtcher(Mac端)将镜像烧录到tf卡中</p><h2 id="3-开启ssh登陆以及配置wifi"><a href="#3-开启ssh登陆以及配置wifi" class="headerlink" title="3.开启ssh登陆以及配置wifi"></a>3.开启ssh登陆以及配置wifi</h2><p>打开烧录完成的盘，进入boot目录，新建ssh文件<strong>（文件叫ssh，没有扩展名或后缀）</strong></p><p>继续在boot目录下新建<strong>wpa_supplicant.conf</strong>文件，编辑其内容如下</p><pre class="line-numbers language-none"><code class="language-none">country&#x3D;CNctrl_interface&#x3D;DIR&#x3D;&#x2F;var&#x2F;run&#x2F;wpa_supplicant GROUP&#x3D;netdevupdate_config&#x3D;1 network&#x3D;&#123;ssid&#x3D;&quot;WiFi-A&quot;psk&#x3D;&quot;12345678&quot;key_mgmt&#x3D;WPA-PSKpriority&#x3D;1&#125; network&#x3D;&#123;ssid&#x3D;&quot;WiFi-B&quot;psk&#x3D;&quot;12345678&quot;key_mgmt&#x3D;WPA-PSKpriority&#x3D;2scan_ssid&#x3D;1&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中</p><ul><li>ssid为wifi名字</li><li>psk是wifi密码，如果没有密码，不加这一行</li><li>priority是连接优先级</li><li>key_mgmt是使用的加密协议，使用WEP加密填NONE，使用WPA&#x2F;WPA2加密填WPA-PSK（一般都是这个）</li><li>scan_ssid:连接隐藏WiFi时需要指定该值为1</li></ul><h2 id="4-通过ssh连接到树莓派"><a href="#4-通过ssh连接到树莓派" class="headerlink" title="4.通过ssh连接到树莓派"></a>4.通过ssh连接到树莓派</h2><p>通过ssh连接需要知道树莓派的ip地址，下面有几种方式来连接</p><ol><li><p>使用<code>ssh pi@raspberrypi.local</code>命令连接，无需知道树莓派的ip地址，需要一定的扫描ip时间，要等一会</p></li><li><p>登陆路由器后台网站，找到树莓派的ip地址，由于我是校园网，这个对我无效</p></li><li><p>用手机或者电脑开热点，将第三步的wifi设置设为热点的名字和密码，从而能够从手机或者电脑中获得树莓派ip地址</p><p><img src="https://cdn.jsdelivr.net/gh/lgds-01/picture@main/uPic/image-20211117185533736.png" alt="image-20211117185533736"></p></li><li><p>当电脑和树莓派连在同一局域网下，使用<code>arp -a</code>命令能够找到树莓派ip</p></li></ol><p>找到ip后，利用命令<code>ssh pi@ip</code>登陆树莓派，默认密码为raspberry</p><h2 id="5-更换apt源为清华源"><a href="#5-更换apt源为清华源" class="headerlink" title="5.更换apt源为清华源"></a>5.更换apt源为清华源</h2><p>按照<a href="https://mirrors.tuna.tsinghua.edu.cn/help/raspbian/">清华大学Raspbian 镜像使用帮助</a>，将&#x2F;etc&#x2F;apt&#x2F;sources.list更改为以下内容</p><pre class="line-numbers language-none"><code class="language-none">deb http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;raspbian&#x2F;raspbian&#x2F; buster main non-free contrib rpideb-src http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;raspbian&#x2F;raspbian&#x2F; buster main non-free contrib rpi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将&#x2F;etc&#x2F;apt&#x2F;sources.list.d&#x2F;raspi.list更改为以下内容</p><pre class="line-numbers language-none"><code class="language-none">deb http:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;raspberrypi&#x2F; buster main ui<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后使用下列命令更新apt</p><pre class="line-numbers language-none"><code class="language-none">sudo apt updatesudo apt upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> experiment </category>
          
          <category> raspberry pi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> raspberry pi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>M1 Macbook Air使用VSCode配置C++环境</title>
      <link href="/m1-macbook-air-shi-yong-vscode-pei-zhi-c-huan-jing/2021/11/14/"/>
      <url>/m1-macbook-air-shi-yong-vscode-pei-zhi-c-huan-jing/2021/11/14/</url>
      
        <content type="html"><![CDATA[<h3 id="M1-Macbook-Air使用VSCode配置C-环境"><a href="#M1-Macbook-Air使用VSCode配置C-环境" class="headerlink" title="M1 Macbook Air使用VSCode配置C++环境"></a>M1 Macbook Air使用VSCode配置C++环境</h3><h4 id="第一步：下载VSCode"><a href="#第一步：下载VSCode" class="headerlink" title="第一步：下载VSCode"></a>第一步：下载VSCode</h4><p>vscode官网国内访问确实很慢，耐心等</p><p><a href="https://code.visualstudio.com/">点击前往vscode官网</a> </p><p>选择下载Universal版本（支持arm架构）</p><p><img src="https://static01.imgkr.com/temp/3e6de66ed90f4d54b8093628afed751f.png"></p><h4 id="第二步：安装VSCode"><a href="#第二步：安装VSCode" class="headerlink" title="第二步：安装VSCode"></a>第二步：安装VSCode</h4><p>选择好路径无脑下一步就行</p><h4 id="第三步：安装插件"><a href="#第三步：安装插件" class="headerlink" title="第三步：安装插件"></a>第三步：安装插件</h4><p>安装C&#x2F;C++、CodeLLDB、C++ Intellisense</p><p><img src="https://static01.imgkr.com/temp/53f82a893f2449bf92dbaa5812dd1c1e.png"></p><p><strong>一定要安装CodeLLDB</strong>，要不然会无法debug，听说是apple取消了macos对lldb的支持，所以要用这个插件才能使用debug</p><h4 id="第四步：生成c-cpp-properties-json配置文件"><a href="#第四步：生成c-cpp-properties-json配置文件" class="headerlink" title="第四步：生成c_cpp_properties.json配置文件"></a>第四步：生成c_cpp_properties.json配置文件</h4><p>首先新建一个cpp文件，随便写点啥。</p><p>接着shift+command+p，选择C&#x2F;C++:Edit Configurations(UI)</p><p>按照下图配置</p><p><img src="https://static01.imgkr.com/temp/4c6cd5ce3a544d34be0f77ee0f4a120b.png"></p><p>这样在.vscode文件夹下就会生成一个c_cpp_properties.json文件</p><h4 id="第五步：生成task-json文件"><a href="#第五步：生成task-json文件" class="headerlink" title="第五步：生成task.json文件"></a>第五步：生成task.json文件</h4><p>返回cpp文件，选择Terminal下的Configure Default Build Task</p><p><img src="https://static01.imgkr.com/temp/a6e22b18c8d9403982a2d197e5608b18.png"></p><p>选择 clang++生成活动文件</p><p><img src="https://static01.imgkr.com/temp/c198c79e06a4483b9c64e98fc2ba2bb8.png"></p><p>然后会自动生成一个task.json文件并跳转，将下面的配置复制粘贴到task.json并保存</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"tasks"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"shell"</span><span class="token punctuation">,</span>            <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"C/C++: clang++ 生成活动文件"</span><span class="token punctuation">,</span>            <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"/usr/bin/clang++"</span><span class="token punctuation">,</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">"-g"</span><span class="token punctuation">,</span>                <span class="token string">"$&#123;file&#125;"</span><span class="token punctuation">,</span>                <span class="token string">"-o"</span><span class="token punctuation">,</span>                <span class="token string">"$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.out"</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"group"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"kind"</span><span class="token operator">:</span> <span class="token string">"build"</span><span class="token punctuation">,</span>                <span class="token property">"isDefault"</span><span class="token operator">:</span> <span class="token boolean">true</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token property">"problemMatcher"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"2.0.0"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第六步：配置launch-json文件"><a href="#第六步：配置launch-json文件" class="headerlink" title="第六步：配置launch.json文件"></a>第六步：配置launch.json文件</h4><p>在cpp文件中，按下fn+F5，选择C++(GDB&#x2F;LLDB)</p><p><img src="https://static01.imgkr.com/temp/faacebfb771d423eb03ff6b43138616d.png"></p><p>接着选择<strong>clang++-生成和调试活动文件</strong></p><p><img src="https://static01.imgkr.com/temp/6d595a5e5e864f439a294b68a44e347c.png"></p><p>然后将下面配置复制粘贴到自动生成的launch.json中，并保存</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token comment">// Use IntelliSense to learn about possible attributes.</span>    <span class="token comment">// Hover to view descriptions of existing attributes.</span>    <span class="token comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>    <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"clang++ - 生成和调试活动文件"</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"lldb"</span><span class="token punctuation">,</span>            <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>            <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.out"</span><span class="token punctuation">,</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"$&#123;workspaceFolder&#125;"</span><span class="token punctuation">,</span>            <span class="token property">"preLaunchTask"</span><span class="token operator">:</span> <span class="token string">"C/C++: clang++ 生成活动文件"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="第7步：笑着debug"><a href="#第7步：笑着debug" class="headerlink" title="第7步：笑着debug"></a>第7步：笑着debug</h4><p>写代码一定要开心，debug一定要笑哦</p>]]></content>
      
      
      <categories>
          
          <category> experiment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
            <tag> c++ </tag>
            
            <tag> macbook </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask+gunicorn+nginx部署全流程</title>
      <link href="/flask-gunicorn-nginx-bu-shu-quan-liu-cheng/2021/11/14/"/>
      <url>/flask-gunicorn-nginx-bu-shu-quan-liu-cheng/2021/11/14/</url>
      
        <content type="html"><![CDATA[<h2 id="flask-gunicorn-nginx部署全流程"><a href="#flask-gunicorn-nginx部署全流程" class="headerlink" title="flask+gunicorn+nginx部署全流程"></a>flask+gunicorn+nginx部署全流程</h2><h3 id="一、准备flask项目"><a href="#一、准备flask项目" class="headerlink" title="一、准备flask项目"></a>一、准备flask项目</h3><p>test.py文件内容如下</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flaskapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/test/&lt;name>'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"hello, &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、配置nginx"><a href="#二、配置nginx" class="headerlink" title="二、配置nginx"></a>二、配置nginx</h3><p>进入nginx配置文件，可以用<code>locate nginx.conf</code>命令查询位置</p><p>在server中增加一个loaction，如下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">location ^~ /data/ <span class="token punctuation">&#123;</span>         proxy_pass http://127.0.0.1:8010/<span class="token punctuation">;</span>         proxy_set_header Host <span class="token variable">$host</span><span class="token punctuation">;</span>         proxy_set_header X-Forwaeded-For <span class="token variable">$proxy_add_x_forwarded_for</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>完成修改后，使用命令<code>systemctl restart nginx</code>重启nginx服务，使得更改后的配置生效</strong></p><p>注意事项：</p><ol><li><p><strong>^&#x3D; 表示url以某个常规字符串开头</strong>，即为匹配url路径，例如host:port&#x2F;data&#x2F;a&#x2F;b&#x2F;c,host:port&#x2F;data&#x2F;d.txt均能被上述规则匹配</p></li><li><p>proxy_pass 最后一个&#x2F;加与不加，作用不同</p><ul><li><p>若为proxy_pass <a href="http://127.0.0.1:8010/">http://127.0.0.1:8010/</a>   最后有&#x2F;</p><p>访问host:port&#x2F;data&#x2F;a&#x2F;b.txt，则代理到<a href="http://127.0.0.1:8080/a/b.txt">http://127.0.0.1:8080/a/b.txt</a></p></li><li><p>若为proxy_pass <a href="http://127.0.0.1:8010/">http://127.0.0.1:8010</a>  最后没有&#x2F;</p><p>访问host:port&#x2F;data&#x2F;a&#x2F;b.txt，则代理到<a href="http://127.0.0.1:8080/data/a/b.txt">http://127.0.0.1:8080/data/a/b.txt</a></p></li></ul><p>具体情况可以自行百度</p></li></ol><h3 id="三、利用gunicorn后台运行flask"><a href="#三、利用gunicorn后台运行flask" class="headerlink" title="三、利用gunicorn后台运行flask"></a>三、利用gunicorn后台运行flask</h3><p>使用下述命令运行flask,需要<strong>在flask项目所在文件夹</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">nohup</span> gunicorn -w <span class="token number">4</span> -b <span class="token number">127.0</span>.0.1:8010 test:app <span class="token operator">></span> test.log <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>命令解释:</p><ul><li>nohup 不挂断运行命令</li><li>gunicorn  test:app   test是flask项目的python文件名<ul><li>-w 进程数量</li><li>-b 监听地址和端口 <strong>需要和nginx配置中的相同</strong></li></ul></li><li>&gt;  test.log 日志信息重定向到test.log</li><li>&amp; 后台运行程序</li></ul><h3 id="四、访问网址"><a href="#四、访问网址" class="headerlink" title="四、访问网址"></a>四、访问网址</h3><p>访问host:port&#x2F;data&#x2F;test&#x2F;lgds</p><p><img src="https://img-blog.csdnimg.cn/img_convert/934ce123d2435ae600f22ae2637f59ff.png" alt="image-20211017204611026"></p><h3 id="五、结束gunicorn进程"><a href="#五、结束gunicorn进程" class="headerlink" title="五、结束gunicorn进程"></a>五、结束gunicorn进程</h3><p>使用<code>kill -9 进程号</code>命令即可，进程号可以使用<code>ps -aux | grep gunicorn</code>查询</p>]]></content>
      
      
      <categories>
          
          <category> experiment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QT使用qucsdk插件，并打包成项目发布全过程</title>
      <link href="/qt-shi-yong-qucsdk-cha-jian-bing-da-bao-cheng-xiang-mu-fa-bu-quan-guo-cheng/2021/11/14/"/>
      <url>/qt-shi-yong-qucsdk-cha-jian-bing-da-bao-cheng-xiang-mu-fa-bu-quan-guo-cheng/2021/11/14/</url>
      
        <content type="html"><![CDATA[<h2 id="QT使用qucsdk插件，并打包成项目发布全过程"><a href="#QT使用qucsdk插件，并打包成项目发布全过程" class="headerlink" title="QT使用qucsdk插件，并打包成项目发布全过程"></a>QT使用qucsdk插件，并打包成项目发布全过程</h2><h3 id="1-下载插件"><a href="#1-下载插件" class="headerlink" title="1.下载插件"></a>1.下载插件</h3><p>下载地址：<a href="https://github.com/feiyangqingyun/qucsdk">https://github.com/feiyangqingyun/qucsdk</a> <strong>（给大佬点个star）</strong></p><p>一定要下载<strong>所用的qt版本+编译器+位数完全一致</strong>的版本</p><p><img src="https://img-blog.csdnimg.cn/img_convert/aaeb2346dd4f5706321fea49861ca637.png" alt="image-20211103201517945"></p><p>我的qt版本是5.12.3，使用mingw73.64，因此解压qt_5_12_3_mingw73_64中的压缩包</p><p><img src="https://img-blog.csdnimg.cn/img_convert/de1a128ce1666ce4e88d5aa06f305372.png" alt="image-20211103201632601"></p><h3 id="2-复制dll到编译器的designer目录"><a href="#2-复制dll到编译器的designer目录" class="headerlink" title="2.复制dll到编译器的designer目录"></a>2.复制dll到编译器的designer目录</h3><p>将压缩包中对应文件解压，并复制到   D:\QT\5.12.3\mingw73_64\plugins\designer  需要更改为你的qt安装目录</p><p>最终文件夹效果为</p><p><img src="https://img-blog.csdnimg.cn/img_convert/7eaa95dc008024b46c79d3ab01650c32.png" alt="image-20211103195009968"></p><h3 id="3-将插件集成到QtCreator的QtDesigner中"><a href="#3-将插件集成到QtCreator的QtDesigner中" class="headerlink" title="3.将插件集成到QtCreator的QtDesigner中"></a>3.将插件集成到QtCreator的QtDesigner中</h3><p>首先，查看QtCreator是用什么编译的，帮助–&gt;About Qt Creator</p><p><img src="https://img-blog.csdnimg.cn/img_convert/f1656abe5d35478bda79d2fa817f2150.png" alt="image-20211103195304013"></p><p><strong>一定要选择QtCreator对应编译器的压缩包中dll文件</strong></p><p>比如我，就选择了qt_5_12_3_msvc2017_32中的dll文件</p><p>将解压出来的文件全部复制到D:\QT\Tools\QtCreator\bin\plugins\designer中，这里也需要改成你的安装目录，效果如下</p><p><img src="https://img-blog.csdnimg.cn/img_convert/6b105614b6390ba8e5db03bddce972da.png" alt="image-20211103195607493"></p><h3 id="4-新建一个Qt工程"><a href="#4-新建一个Qt工程" class="headerlink" title="4.新建一个Qt工程"></a>4.新建一个Qt工程</h3><p>记得勾选ui文件选项，点开mianwindow.ui，效果如下</p><p><img src="https://img-blog.csdnimg.cn/img_convert/cf1fd7d527d2668ef60255016d40ea57.png" alt="image-20211103195731589"></p><p>可以发现，大佬开发的控件都加载进来了</p><h3 id="5-更改工程设置"><a href="#5-更改工程设置" class="headerlink" title="5.更改工程设置"></a>5.更改工程设置</h3><p>在.pro文件中增加以下语句</p><pre class="line-numbers language-none"><code class="language-none">#指定可执行文件目录 放到这里省了拷贝动态库动作 专为小白懒人考虑DESTDIR     &#x3D; $$PWD&#x2F;quc#一次性引入自定义控件的所有头文件 懒得一个个拷贝INCLUDEPATH +&#x3D; $$PWD&#x2F;quc&#x2F;include#不同的构建套件 debug release 依赖不同的链接库CONFIG(debug, debug|release)&#123;LIBS +&#x3D; -L$$PWD&#x2F;quc&#x2F; -lqucd&#125; else &#123;LIBS +&#x3D; -L$$PWD&#x2F;quc&#x2F; -lquc&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同时在项目目录下新建quc文件夹，将<strong>对应编译器版本的压缩包</strong>中的所有文件赋值到quc文件夹中，同时将include文件夹整体复制到quc文件夹中，具体效果如下</p><p><img src="https://img-blog.csdnimg.cn/img_convert/544a26635faed1ffa290cdbf8e8e4640.png" alt="image-20211103201450503"></p><h3 id="6-项目打包"><a href="#6-项目打包" class="headerlink" title="6.项目打包"></a>6.项目打包</h3><p>项目完成后，点击生成release版，相应的exe文件会生成在项目目录下的quc文件夹中</p><p><img src="https://img-blog.csdnimg.cn/img_convert/62a9b0ba85a9fb521ee0e784f63801fc.png" alt="image-20211103201834729"></p><p>运行对应版本的mingw控制台程序，输入以下命令</p><pre class="line-numbers language-none"><code class="language-none">windeployqt &quot;项目地址\quc\生成文件.exe&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/img_convert/0a62d053c5182db1af5dbed26bf2bba1.png" alt="image-20211103202107914"></p><p>quc文件夹中效果如下</p><p><img src="https://img-blog.csdnimg.cn/img_convert/766c92f35a1c6945ff1b0fa709d8198b.png" alt="image-20211103202131617"></p><p>点击对应可执行文件，可能仍然会报错，缺少一些dll文件，这时需要手动从对应编译器的bin目录下复制</p><h3 id="7-使用Engima-Virtual-Box压缩成一个exe文件"><a href="#7-使用Engima-Virtual-Box压缩成一个exe文件" class="headerlink" title="7.使用Engima Virtual Box压缩成一个exe文件"></a>7.使用Engima Virtual Box压缩成一个exe文件</h3><p><strong>选择要压缩的文件时，注意不要选择include文件夹、libqucd.a、qucd.dll</strong></p><p>后面两个文件是debug版的动态链接库</p>]]></content>
      
      
      <categories>
          
          <category> experiment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SwiftUI中消除NavigationLink自带右边小箭头的方法</title>
      <link href="/swiftui-zhong-xiao-chu-navigationlink-zi-dai-you-bian-xiao-jian-tou-de-fang-fa/2021/11/12/"/>
      <url>/swiftui-zhong-xiao-chu-navigationlink-zi-dai-you-bian-xiao-jian-tou-de-fang-fa/2021/11/12/</url>
      
        <content type="html"><![CDATA[<h1 id="SwiftUI-中消除-NavigationLink-自带右边小箭头的方法"><a href="#SwiftUI-中消除-NavigationLink-自带右边小箭头的方法" class="headerlink" title="SwiftUI 中消除 NavigationLink 自带右边小箭头的方法"></a>SwiftUI 中消除 NavigationLink 自带右边小箭头的方法</h1><p>在 SwiftUI 中使用 NavigationLink 总是会在最右边有一个指示性箭头，如下图</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">NavigationView</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">List</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">..&lt;</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> index <span class="token keyword">in</span>                <span class="token class-name">NavigationLink</span><span class="token punctuation">(</span>destination<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"hi"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">index</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/img_convert/c86f17689dcc16d0978c524bb096b64f.png" alt="image-20211009203635483"></p><p>解决办法很简单，如下</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">NavigationView</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">List</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">..&lt;</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> index <span class="token keyword">in</span>                <span class="token class-name">ZStack</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">index</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                    <span class="token class-name">NavigationLink</span><span class="token punctuation">(</span>destination<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"hi"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> <span class="token class-name">EmptyView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>最重要的是 NavigationLink 的 opacity 设为 0</strong></p><p>效果如下：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3bb71b219f64a2ca7671310ebb8bccd8.png" alt="image-20211009203855170"></p><h2 id="SwiftUI-中消除-NavigationLink-自带右边小箭头的方法-1"><a href="#SwiftUI-中消除-NavigationLink-自带右边小箭头的方法-1" class="headerlink" title="SwiftUI 中消除 NavigationLink 自带右边小箭头的方法"></a>SwiftUI 中消除 NavigationLink 自带右边小箭头的方法</h2><p>在 SwiftUI 中使用 NavigationLink 总是会在最右边有一个指示性箭头，如下图</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">NavigationView</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">List</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">..&lt;</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> index <span class="token keyword">in</span>                <span class="token class-name">NavigationLink</span><span class="token punctuation">(</span>destination<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"hi"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">index</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://img-blog.csdnimg.cn/img_convert/c86f17689dcc16d0978c524bb096b64f.png" alt="image-20211009203635483"></p><p>解决办法很简单，如下</p><pre class="line-numbers language-swift" data-language="swift"><code class="language-swift"><span class="token keyword">struct</span> <span class="token class-name">ContentView</span><span class="token punctuation">:</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> body<span class="token punctuation">:</span> <span class="token keyword">some</span> <span class="token class-name">View</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">NavigationView</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">List</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">..&lt;</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> index <span class="token keyword">in</span>                <span class="token class-name">ZStack</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"</span><span class="token interpolation-punctuation punctuation">\(</span><span class="token interpolation">index</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">"</span></span><span class="token punctuation">)</span>                    <span class="token class-name">NavigationLink</span><span class="token punctuation">(</span>destination<span class="token punctuation">:</span> <span class="token class-name">Text</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"hi"</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span> label<span class="token punctuation">:</span> <span class="token punctuation">&#123;</span> <span class="token class-name">EmptyView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">opacity</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>最重要的是 NavigationLink 的 opacity 设为 0</strong></p><p>效果如下：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/3bb71b219f64a2ca7671310ebb8bccd8.png" alt="image-20211009203855170"></p>]]></content>
      
      
      <categories>
          
          <category> bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swiftui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker使用自定义网络实现容器内通讯</title>
      <link href="/docker-shi-yong-zi-ding-yi-wang-luo-shi-xian-rong-qi-nei-tong-xun/2021/10/14/"/>
      <url>/docker-shi-yong-zi-ding-yi-wang-luo-shi-xian-rong-qi-nei-tong-xun/2021/10/14/</url>
      
        <content type="html"><![CDATA[<h1 id="docker使用自定义网络实现容器内通讯"><a href="#docker使用自定义网络实现容器内通讯" class="headerlink" title="docker使用自定义网络实现容器内通讯"></a>docker使用自定义网络实现容器内通讯</h1><p>通过自定义网络，实现centos和mysql两个容器之间的通讯，即从centos中能够访问mysql容器。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">创建一个自定义网络<span class="token punctuation">[</span>root@VM-0-17-centos ~<span class="token punctuation">]</span><span class="token comment"># docker network create test-network</span>1293056b6aa93288af5a72f212498e7735c2a1f546fd5ea4a5d9d7590376ca4b创建mysql 使用--network参数加入自定义网络<span class="token punctuation">[</span>root@VM-0-17-centos ~<span class="token punctuation">]</span><span class="token comment"># docker run -it -d --network test-network --name mysql -e MYSQL_ROOT_PASSWORD=1234 mysql</span>bfb95be5067e62b9331ae92b90a72205999960fe3354a37a8bc2e8871dec81b1创建centos容器并进入 使用--network参数加入自定义网络<span class="token punctuation">[</span>root@VM-0-17-centos ~<span class="token punctuation">]</span><span class="token comment"># docker run -it --network test-network --name centos centos /bin/bash</span>在centos中安装mysql<span class="token punctuation">[</span>root@a74be4446cba /<span class="token punctuation">]</span><span class="token comment"># yum install mysql</span>远程连接mysql服务<span class="token punctuation">[</span>root@250a1685a01a /<span class="token punctuation">]</span><span class="token comment"># mysql -h mysql -uroot -p1234</span>mysql: <span class="token punctuation">[</span>Warning<span class="token punctuation">]</span> Using a password on the <span class="token builtin class-name">command</span> line interface can be insecure.Welcome to the MySQL monitor.  Commands end with <span class="token punctuation">;</span> or <span class="token punctuation">\</span>g.Your MySQL connection <span class="token function">id</span> is <span class="token number">8</span>Server version: <span class="token number">8.0</span>.23 MySQL Community Server - GPLCopyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token number">2000</span>, <span class="token number">2020</span>, Oracle and/or its affiliates. All rights reserved.Oracle is a registered trademark of Oracle Corporation and/or itsaffiliates. Other names may be trademarks of their respectiveowners.Type <span class="token string">'help;'</span> or <span class="token string">'\h'</span> <span class="token keyword">for</span> help. Type <span class="token string">'\c'</span> to <span class="token function">clear</span> the current input statement.mysql<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在centos中也能成功ping通mysql</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@250a1685a01a /<span class="token punctuation">]</span><span class="token comment">#  ping mysql</span>PING mysql <span class="token punctuation">(</span><span class="token number">172.20</span>.0.2<span class="token punctuation">)</span> <span class="token number">56</span><span class="token punctuation">(</span><span class="token number">84</span><span class="token punctuation">)</span> bytes of data.<span class="token number">64</span> bytes from mysql.test-network <span class="token punctuation">(</span><span class="token number">172.20</span>.0.2<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">1</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.033</span> ms<span class="token number">64</span> bytes from mysql.test-network <span class="token punctuation">(</span><span class="token number">172.20</span>.0.2<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">2</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.053</span> ms<span class="token number">64</span> bytes from mysql.test-network <span class="token punctuation">(</span><span class="token number">172.20</span>.0.2<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">3</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.049</span> ms<span class="token number">64</span> bytes from mysql.test-network <span class="token punctuation">(</span><span class="token number">172.20</span>.0.2<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">4</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.048</span> ms<span class="token number">64</span> bytes from mysql.test-network <span class="token punctuation">(</span><span class="token number">172.20</span>.0.2<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">5</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.047</span> ms<span class="token number">64</span> bytes from mysql.test-network <span class="token punctuation">(</span><span class="token number">172.20</span>.0.2<span class="token punctuation">)</span>: <span class="token assign-left variable">icmp_seq</span><span class="token operator">=</span><span class="token number">6</span> <span class="token assign-left variable">ttl</span><span class="token operator">=</span><span class="token number">64</span> <span class="token assign-left variable">time</span><span class="token operator">=</span><span class="token number">0.070</span> ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> experiment </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蒙特卡洛搜索在Snake(botzone)中的应用</title>
      <link href="/meng-te-qia-luo-sou-suo-zai-snake-botzone-zhong-de-ying-yong/2021/08/14/"/>
      <url>/meng-te-qia-luo-sou-suo-zai-snake-botzone-zhong-de-ying-yong/2021/08/14/</url>
      
        <content type="html"><![CDATA[<h4 id="蒙特卡洛搜索在Snake-botzone-中的应用"><a href="#蒙特卡洛搜索在Snake-botzone-中的应用" class="headerlink" title="蒙特卡洛搜索在Snake(botzone)中的应用"></a>蒙特卡洛搜索在Snake(botzone)中的应用</h4><p>数据结构课设的任务是botzone平台的snake智障AI的编写，于是写了这篇文章总结。</p><p><strong>特点</strong>：snake是双人同时选择方向，因此minmax貌似不太可行（不能你一步我一步的下）。而每条蛇最多有3个方向能够选择，因此有9种排列组合。每层遍历9种情况，选择可行方向作为节点，以此向下继续搜索。</p><h5 id="踩过的坑："><a href="#踩过的坑：" class="headerlink" title="踩过的坑："></a>踩过的坑：</h5><ul><li>曾经尝试过限定搜索层数，在到达限定层数时采用评估函数的评判俩条蛇在本局面下的价值，以局面价值的高低来判断输赢，输赢作为reward往上层传播。但是效果并不理想，就是个智障。</li><li>我们需要计算的是3个方向的ucb值，并以此来选择bestchild，但是我一开始计算的是9种排列中可行解的ucb，并未计算某一方向的ucb，因此导致，疯狂增加那个不太可能发生的可行解（建立在对方蛇足够蠢的情况下）的权重，最终选择了那个明显不好的方向</li><li>选择bestchild的时候，只选择了本方ucb最高的方向，但是对方蛇也要认为走的是最佳走法啊。有点minmax的意思，因此，选择bestchild的时候，要选择由本方ucb值最大的方向和对方ucb值最大的方向构成的可行解。</li></ul><p>蒙特卡洛的思想不再赘述，下面是几个重要的函数实现解释：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int uctSearch(State *originstate)&#123;    node *root &#x3D; new node(originstate, nullptr, -1, -1);    if (root-&gt;isTerminal)&#x2F;&#x2F;对方必死的时候，随意选择一个我方能走的方向    &#123;        vector&lt;Action *&gt; actions &#x3D; getPossibleActions(originstate);        return (*actions.begin())-&gt;self_dir;    &#125;    while (getTime() &lt; TIMELIMIT)    &#123;        node *child &#x3D; treePolicy(root);        int reward &#x3D; defaultPolicy(child-&gt;state);        backup(child, reward);    &#125;    lambda1 &#x3D; 0;&#x2F;&#x2F;最后选择时，把ucb公式中的参数置0，只讲胜率作为选择因素    node *bestchild &#x3D; getBestChild(root);    return bestchild-&gt;self_dir;&#125;vector&lt;Action *&gt; getPossibleActions(State *state)&#x2F;&#x2F;用于获取9种排列组合中的可行解，即在当前局面下，双方蛇能走的方向的组合排列&#123;    vector&lt;Action *&gt; actions;    for (int i &#x3D; 0; i &lt; 4; i++)    &#123;        if (validDirection(state, 0, i))        &#123;            for (int j &#x3D; 0; j &lt; 4; j++)            &#123;                if (validDirection(state, 1, j))                &#123;                    point self &#x3D; point(state-&gt;snake[0].begin()-&gt;x + dx[i], state-&gt;snake[0].begin()-&gt;y + dy[i]);                    point opponent &#x3D; point(state-&gt;snake[1].begin()-&gt;x + dx[j], state-&gt;snake[1].begin()-&gt;y + dy[j]);                    actions.push_back(new Action(self, opponent, i, j));                &#125;            &#125;        &#125;    &#125;    if (!actions.size())&#x2F;&#x2F;如果对方没有能走的方向，就只考虑自己能走的方向    &#123;        for (int i &#x3D; 0; i &lt; 4; i++)        &#123;            if (validDirection(state, 0, i))            &#123;                point self &#x3D; point(state-&gt;snake[0].begin()-&gt;x + dx[i], state-&gt;snake[0].begin()-&gt;y + dy[i]);                point opponent &#x3D; point(-1, -1);                actions.push_back(new Action(self, opponent, i, -1));            &#125;        &#125;    &#125;    return actions;&#125;node *getBestChild(node *root)&#123;    int self_dir&#x3D;getDirection(root,0);&#x2F;&#x2F;本方ucb最高的方向    int opponent_dir&#x3D;getDirection(root,1);&#x2F;&#x2F;对方ucb最高的方向       for(auto child:root-&gt;children)    &#123;        if(child-&gt;self_dir&#x3D;&#x3D;self_dir&amp;&amp;child-&gt;opponent_dir&#x3D;&#x3D;opponent_dir)return child;    &#125;    return nullptr;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码开源在<a href="https://github.com/lgds01/snake-in-botzone.git">lgds01&#x2F;snake-in-botzone</a></p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通配符与正则表达式的学习</title>
      <link href="/tong-pei-fu-yu-zheng-ze-biao-da-shi-de-xue-xi/2021/06/14/"/>
      <url>/tong-pei-fu-yu-zheng-ze-biao-da-shi-de-xue-xi/2021/06/14/</url>
      
        <content type="html"><![CDATA[<h3 id="通配符与正则表达式的学习"><a href="#通配符与正则表达式的学习" class="headerlink" title="通配符与正则表达式的学习"></a>通配符与正则表达式的学习</h3><h4 id="二者的使用场景"><a href="#二者的使用场景" class="headerlink" title="二者的使用场景"></a>二者的使用场景</h4><ul><li><p>通配符主要作用于<strong>文件名</strong>的匹配，常用命令为ls、find、cp、mv</p></li><li><p>正则表达式主要用于匹配<strong>文件中的字符串</strong>，常用命令为grep、awk、sed</p></li></ul><h4 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h4><table><thead><tr><th align="center">通配符</th><th align="center">含义</th><th align="center">例子</th><th align="center">匹配</th></tr></thead><tbody><tr><td align="center">*</td><td align="center">匹配0个或多个字符</td><td align="center">a*</td><td align="center">以a开头的所有文件</td></tr><tr><td align="center">[]</td><td align="center">匹配括号中的<strong>单个</strong>字符</td><td align="center">[abc]*&#x2F;[a-c]*</td><td align="center">以abc中任意一个字符开头的文件</td></tr><tr><td align="center">[!]&#x2F;[^]</td><td align="center">匹配不在括号中的任意单个字符</td><td align="center">[!abc]*&#x2F;[^abc]</td><td align="center">除了abc中任意字符开头的文件</td></tr><tr><td align="center">?</td><td align="center">匹配任意单个字符</td><td align="center">a?.doc</td><td align="center">以a开头后接一个字符，并且以.doc结尾的文件</td></tr><tr><td align="center">{}</td><td align="center">表示生成序列</td><td align="center">{a,b,c}*&#x2F;{a..c}*</td><td align="center">以abc中任意一个字符开头的文件</td></tr></tbody></table><h5 id="abc-x2F-a-z-与-a-b-c-x2F-a-z-的区别"><a href="#abc-x2F-a-z-与-a-b-c-x2F-a-z-的区别" class="headerlink" title="[abc]&#x2F;[a-z]与{a,b,c}&#x2F;{a..z}的区别"></a>[abc]&#x2F;[a-z]与{a,b,c}&#x2F;{a..z}的区别</h5><p>[abc]&#x2F;[a-z]只能用于<strong>查找</strong>文件,而{a,b,c}&#x2F;{a..z}可用于<strong>查找和创建</strong> 文件，在勇于查找文件时，二者作用一样</p><pre class="line-numbers language-none"><code class="language-none">#&#123;&#125;能用于创建文件[root@VM-0-17-centos temp]# touch &#123;a..z&#125;.txt[root@VM-0-17-centos temp]# lsa.txt  c.txt  e.txt  g.txt  i.txt  k.txt  m.txt  o.txt  q.txt  s.txt  u.txt  w.txt  y.txtb.txt  d.txt  f.txt  h.txt  j.txt  l.txt  n.txt  p.txt  r.txt  t.txt  v.txt  x.txt  z.txt#[]不能用于创建文件[root@VM-0-17-centos temp]# touch [a-z].txt[root@VM-0-17-centos temp]# ls[a-z].txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><table><thead><tr><th align="center">正则表达式</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">*</td><td align="center">匹配前一个子表达式0次或多次</td></tr><tr><td align="center">+</td><td align="center">匹配前面的子表达式一次或多次</td></tr><tr><td align="center">.</td><td align="center">匹配除了换行符以外的任意单个字符</td></tr><tr><td align="center">?</td><td align="center">匹配前面的子表达式零次或一次，或者表示匹配模式非贪婪</td></tr><tr><td align="center">^</td><td align="center">字符串首</td></tr><tr><td align="center">$</td><td align="center">字符串尾</td></tr><tr><td align="center">[abc]</td><td align="center">匹配括号内的任意单个字符</td></tr><tr><td align="center">[^abc]</td><td align="center">匹配除括号内的任意单个字符</td></tr><tr><td align="center">\</td><td align="center">转义符，取消元字符的特殊含义或形成一个元字符</td></tr><tr><td align="center">{n}</td><td align="center">表示前面的字符出现n次</td></tr><tr><td align="center">{n,}</td><td align="center">表示前面的字符至少出现n次</td></tr><tr><td align="center">{n,m}</td><td align="center">表示前面的字符至少出现n次，最多m次</td></tr><tr><td align="center">(Pattern)</td><td align="center">匹配 pattern 并获取这一匹配。</td></tr><tr><td align="center">\d</td><td align="center">匹配一个数字字符，等价于[0-9]</td></tr><tr><td align="center">\D</td><td align="center">匹配一个非数字字符，等价于[^0-9]</td></tr><tr><td align="center">\w</td><td align="center">匹配字母、数字、下划线。等价于[A-Za-z0-9_]</td></tr><tr><td align="center">\W</td><td align="center">匹配非字母、数字、下划线。等价于 [^A-Za-z0-9_]</td></tr></tbody></table><p><strong>关于?的说明</strong></p><ul><li>匹配前面的子表达式零次或一次。例如，”do(es)?” 可以匹配 “do” 或 “does” 。? 等价于 {0,1}。</li><li>当该字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 “aaaa”，’a+?’ 将匹配单个 “a”，而 ‘a+’ 将匹配所有 ‘a’。</li></ul><h5 id="好用的网站"><a href="#好用的网站" class="headerlink" title="好用的网站"></a>好用的网站</h5><p><a href="https://jex.im/regulex/#!flags=&re=%5Cd%2B%5C.">正则表达式可视化网站</a></p><p><img src="https://static01.imgkr.com/temp/8140fb94a0364b4ea206d09e3a761ffe.png"></p><p><a href="https://regexr.com/">正则表达式在线调试网站</a></p><p><img src="https://static01.imgkr.com/temp/e24d4b5587bf4418a28a666ac9d2d534.png"></p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通配符与正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打家劫舍问题</title>
      <link href="/da-jia-jie-she-wen-ti/2021/05/14/"/>
      <url>/da-jia-jie-she-wen-ti/2021/05/14/</url>
      
        <content type="html"><![CDATA[<h1 id="打家劫舍问题"><a href="#打家劫舍问题" class="headerlink" title="打家劫舍问题"></a>打家劫舍问题</h1><blockquote><p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。给定一个代表每个房屋存放金额的非负整数数组，计算你不触动警报装置的情况下，一夜之内能够偷窃到的最高金额。</p></blockquote><p>dp数组含义：dp[i]表示前i个房屋能够偷窃到的最高金额</p><p>状态转移方程：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">dp[i]&#x3D;max(dp[i-2]+nums[i],dp[i-1])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>初始化：dp[0]&#x3D;nums[0]，dp[1]&#x3D;max(num[0],nums[1])</p><blockquote><p>你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方<strong>所有的房屋都围成一圈</strong> ，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警 。给定一个代表每个房屋存放金额的非负整数数组，计算你 在不触动警报装置的情况下 ，能够偷窃到的最高金额。</p></blockquote><p>相比于上个问题，此问题所有房屋围成了一个圈。而如果偷窃了第一个房屋，则不能偷窃最后一个房屋，反之亦然，因此考虑两种情况：</p><ul><li>只考虑在第一个房屋到倒数第二个房屋内偷窃</li><li>只考虑在第二个房间到最后一个房屋内偷窃</li></ul><p>能偷窃到的最高金额即为此二种情况的最大值</p><blockquote><p>在上次打劫完一条街道之后和一圈房屋后，小偷又发现了一个新的可行窃的地区。这个地区只有一个入口，我们称之为“根”。除了“根”之外，每栋房子有且只有一个“父“房子与之相连。一番侦察之后，聪明的小偷意识到“这个地方的所有房屋的排列类似于一棵二叉树”。如果两个直接相连的房子在同一天晚上被打劫，房屋将自动报警。</p></blockquote><p>此问题即为树形dp问题。</p><p>对于当前结点，有两种情况：</p><ul><li>偷当前结点，则此时偷窃金额为此节点金额+左孙子结点所能偷窃最大金额+右孙子结点所能偷窃最大金额</li><li>不偷当前结点，则此时偷窃金额为左儿子结点所能偷窃最大金额+右儿子结点所能偷窃最大金额</li></ul><p>dp[0]表示不偷当前结点所能得到的最大金额，dp[1]表示偷当前结点所能得到的最大金额，因此，考虑到此节点的最大金额即为max(dp[0],dp[1])</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int rob(Tree* root)&#123;    if(!root)return 0;    if(!root-&gt;left&amp;&amp;!root-&gt;right)return root-&gt;val;    vector&lt;int&gt;dp(2,0);    dp[0]&#x3D;rob(root-&gt;left)+rob(root-&gt;right);    if(root-&gt;left)dp[1]+&#x3D;root-&gt;val+rob(root-&gt;left-&gt;left)+rob(root-&gt;left-&gt;right);    if(root-&gt;right)dp[1]+&#x3D;root-&gt;val+rob(root-&gt;right-&gt;left)+rob(root-&gt;right-&gt;right);    return max(dp[0],dp[1]);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SwiftUI在三级页面出现两个返回按钮以及导航栏过大问题的解决办法</title>
      <link href="/swiftui-zai-san-ji-ye-mian-chu-xian-liang-ge-fan-hui-an-niu-yi-ji-dao-hang-lan-guo-da-wen-ti-de-jie-jue-ban-fa/2021/05/14/"/>
      <url>/swiftui-zai-san-ji-ye-mian-chu-xian-liang-ge-fan-hui-an-niu-yi-ji-dao-hang-lan-guo-da-wen-ti-de-jie-jue-ban-fa/2021/05/14/</url>
      
        <content type="html"><![CDATA[<h1 id="SwiftUI在三级页面出现两个返回按钮以及导航栏过大问题的解决办法"><a href="#SwiftUI在三级页面出现两个返回按钮以及导航栏过大问题的解决办法" class="headerlink" title="SwiftUI在三级页面出现两个返回按钮以及导航栏过大问题的解决办法"></a>SwiftUI在三级页面出现两个返回按钮以及导航栏过大问题的解决办法</h1><p>SwiftUI使用NavigationLink链接到次级页面，由于在次级页面中也加了NavigationView，同时设置了navigationBarTitle，因此会导致一下情况产生：</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b7e537e69f8a79984b63753edae095c0.png" alt="image-20210913234025837"></p><p><img src="https://img-blog.csdnimg.cn/img_convert/bb90a1ee92d5f4038093bc77caccf6b8.png" alt="image-20210913234009651"></p><p>解决办法即为在次级页面中不添加NavigationView，只设置navigationBarTitle</p>]]></content>
      
      
      <categories>
          
          <category> bug </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swiftui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背包问题总结</title>
      <link href="/bei-bao-wen-ti-zong-jie/2021/01/15/"/>
      <url>/bei-bao-wen-ti-zong-jie/2021/01/15/</url>
      
        <content type="html"><![CDATA[<h1 id="背包问题总结"><a href="#背包问题总结" class="headerlink" title="背包问题总结"></a>背包问题总结</h1><p>背包问题主要分为01背包、完全背包、多重背包等</p><h2 id="一、01背包问题"><a href="#一、01背包问题" class="headerlink" title="一、01背包问题"></a>一、01背包问题</h2><p>01背包是背包问题中的基础，只有弄懂了01背包，才能弄懂其他背包问题</p><blockquote><p>有N件物品和一个最多能被重量为W 的背包。第i件物品的重量是weight[i]，得到的价值是value[i] 。<strong>每件物品只能用一次</strong>，求解将哪些物品装入背包里物品价值总和最大。</p></blockquote><p>dp数组定义：dp[i][j]表示，<strong>容量为j的背包在0-i件物品中挑选</strong>，使得背包物品价值总和最大的最大值</p><p>状态转移方程：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">dp[i][j]&#x3D;max(dp[i-1][j],dp[i-1][j-weight[i]]+value[i])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>初始化：根据dp数组定义，dp[0…N][0]均应初始化为0，且dp[0]应该初始化</p><p>代码模版：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;vector&lt;int&gt;&gt;dp(N+1,vector&lt;int&gt;(W,0));for(int i&#x3D;1;i&lt;&#x3D;N;i++)&#123;&#x2F;&#x2F;weight和value从1开始  for(int j&#x3D;0;j&lt;&#x3D;W;j++)&#123;    if(j-weight[i]&gt;&#x3D;0)&#123;    dp[i][j]&#x3D;max(dp[i-1][j],dp[i-1][j-weight[i]]+value[i])    &#125;else&#123;        dp[i][j]&#x3D;dp[i-1][j];    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存选取物品的方案：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt;path(N+1,0);while(N)&#123;    if(dp[N][W]&#x3D;&#x3D;dp[N-1][W])path[N]&#x3D;0;    else&#123;        path[N]&#x3D;1;        W-&#x3D;w[N];    &#125;    N--;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Tips：</p><ul><li>可以先遍历物品再遍历重量，反之亦可以</li></ul><p><strong>（推荐）</strong>使用滚动数组优化空间后：</p><p>dp数组定义：dp[i]表示，<strong>容量为i的背包所能放入物品价值总和的最大值</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for(int i&#x3D;0;i&lt;N;i++)&#123;  for(int j&#x3D;W;j&gt;&#x3D;weight[i];j--)&#123;&#x2F;&#x2F;从大到小遍历是为了使得物品只被放进背包一次    dp[j]&#x3D;max(dp[j],dp[j-weight[i]]+value[i])  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Tips：</p><ul><li>只能先遍历物品再遍历重量，因为先遍历重量会使得背包中只放入一件物品</li><li>重量只能从大到小遍历，因为从小到大遍历会使得物品被放进背包多次。如：dp[weight[0]]&#x3D;value[0]，而dp[2*weight[0]]&#x3D;max(dp[weight[0]],dp[weight[0]]+value[0])，此时，物品0被放进背包两次</li><li>损失了中间转移状态的信息，因此无法输出选取物品的方案</li></ul><h3 id="二、完全背包"><a href="#二、完全背包" class="headerlink" title="二、完全背包"></a>二、完全背包</h3><blockquote><p>有N件物品和一个最多能背重量为W的背包。第i件物品的重量是weight[i]，得到的价值是value[i] 。<strong>每件物品都有无限个（也就是可以放入背包多次）</strong>，求解将哪些物品装入背包里物品价值总和最大。</p></blockquote><p>代码模版：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for(int i&#x3D;0;i&lt;N;i++)&#123;  for(int j&#x3D;weight[i];j&lt;&#x3D;W;j++)&#123;    dp[j]&#x3D;max(dp[j],dp[j-weight[i]]+value[i])  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为物品有无限个，因此重量从小到到遍历</p><h3 id="三、多重背包"><a href="#三、多重背包" class="headerlink" title="三、多重背包"></a>三、多重背包</h3><blockquote><p>有N种物品和一个容量为V 的背包。第i种物品最多有Mi件可用，每件耗费的空间是Ci ，价值是Wi 。求解将哪些物品装入背包可使这些物品的耗费的空间 总和不超过背包容量，且价值总和最大。</p></blockquote><p>多重背包与01背包非常相似，区别只是第i种物品最多有Mi件可用，因此多重背包将Mi件物品摊开，就变成了01背包</p><p>多重背包解题时只需要在最内层加一层遍历物品件数的循环</p><p>代码模版：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">for(int i&#x3D;0;i&lt;N;i++)&#123;  for(int j&#x3D;V;j&gt;&#x3D;C[i];j--)&#123;    for(int k&#x3D;0;k&lt;&#x3D;M[i]&amp;&amp;j&gt;&#x3D;k*C[i];k++)&#123;      dp[j]&#x3D;max(dp[j],dp[j-k*C[i]]+k*W[i]);    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>如果求组合数就是外层for循环遍历物品种类，内层for遍历重量</strong>。</p><p><strong>如果求排列数就是外层for遍历重量，内层for循环遍历物品种类</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>股票买卖问题</title>
      <link href="/gu-piao-mai-mai-wen-ti/2021/01/15/"/>
      <url>/gu-piao-mai-mai-wen-ti/2021/01/15/</url>
      
        <content type="html"><![CDATA[<h1 id="股票买卖问题"><a href="#股票买卖问题" class="headerlink" title="股票买卖问题"></a>股票买卖问题</h1><blockquote><p>给定一个数组 prices ，它的第 i 个元素 nums[i] 表示一支给定股票第 i 天的价格。</p><p>你只能选择 某一天 买入这只股票，并选择在未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润</p></blockquote><p>使用贪心法，向左取最小值，向右取最大值</p><p>使用动态规划法：</p><p>dp数组含义：dp[i][0]表示第i天不持有此股票获得的最大利润，dp[i][1]表示第i天持有此股票获取的最大利润</p><p>状态转移方程：</p><pre class="line-numbers language-[1" data-language="[1"><code class="language-[1">dp[i][0]&#x3D;max(dp[i-1][0],dp[i-1][1]+nums[i]);dp[i][1]&#x3D;max(dp[i-1][1],-nums[i]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>初始化：dp[0][1]&#x3D;-nums[0],dp[0][0]&#x3D;0</p><blockquote><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p><p>设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（<strong>多次买卖一支股票</strong>）。</p><p>注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p></blockquote><p>dp数组含义：dp[i][0]表示第i天不持有此股票获得的最大利润，dp[i][1]表示第i天持有此股票获取的最大利润</p><p>状态转移方程：</p><pre class="line-numbers language-[1" data-language="[1"><code class="language-[1">dp[i][0]&#x3D;max(dp[i-1][0],dp[i-1][1]+nums[i]);dp[i][1]&#x3D;max(dp[i-1][1],dp[i-1][0]-nums[i]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>初始化：dp[0][1]&#x3D;-nums[0],dp[0][0]&#x3D;0</p><blockquote><p>给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。</p><p>设计一个算法来计算你所能获取的最大利润。你<strong>最多可以完成两笔交易</strong>。</p><p>注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p></blockquote><p>dp数组含义：dp[i][0]表示第i天第一次不持有此股票获得的最大利润，dp[i][1]表示第i天第一次持有此股票获取的最大利润，dp[i][2]表示第i天第二次不持有此股票获得的最大利润，dp[i][3]表示第i天第二次持有此股票获取的最大利润</p><p>状态转移方程：</p><p><img src="https://cdn.jsdelivr.net/gh/lgds-01/picture/img/image-20210829235006372.png" alt="image-20210829235006372"></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">dp[i][0]&#x3D;max(dp[i-1][0],-nums[i]);dp[i][1]&#x3D;max(dp[i-1][1],dp[i-1][0]+nums[i]);dp[i][2]&#x3D;max(dp[i-1][2],dp[i-1][1]-nums[i]);dp[i][3]&#x3D;max(dp[i-1][3],dp[i-1][2]+nums[i]);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>初始化：dp[0][0]&#x3D;-nums[0],dp[0][1]&#x3D;0,dp[0][2]&#x3D;-nums[0],dp[0][3]&#x3D;0</p><blockquote><p>给定一个整数数组，其中第 i 个元素代表了第 i 天的股票价格 。</p><p>设计一个算法计算出最大利润。在满足以下约束条件下，你可以尽可能地完成更多的交易（多次买卖一支股票）:</p><ul><li>你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）</li><li>卖出股票后，你无法在第二天买入股票 (即冷冻期为 1 天)</li></ul></blockquote><p>dp数组含义：dp[i][0]表示第i天未买入此股票获得的最大利润，dp[i][1]表示第i天持有此股票获取的最大利润，dp[i][2]表示第i天卖出此股票获得的最大利润，dp[i][3]表示第i天处于冷冻期获取的最大利润</p><p>状态转移方程：</p><p><img src="https://cdn.jsdelivr.net/gh/lgds-01/picture/img/image-20210830000719198.png" alt="image-20210830000719198"></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">dp[i][0]&#x3D;max(dp[i-1][0],dp[i-1][3]);dp[i][1]&#x3D;max(&#123;dp[i-1][0]-nums[i],dp[i-1][1],dp[i-1][3]-nums[i]&#125;);dp[i][2]&#x3D;dp[i-1][1]+nums[i];dp[i][3]&#x3D;dp[i-1][2];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>初始化：dp[0][0]&#x3D;0,dp[0][1]&#x3D;-nums[i],dp[0][2]&#x3D;0，dp[0][3]&#x3D;0</p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QT学习笔记</title>
      <link href="/qt-xue-xi-bi-ji/2021/01/14/"/>
      <url>/qt-xue-xi-bi-ji/2021/01/14/</url>
      
        <content type="html"><![CDATA[<h2 id="pro文件"><a href="#pro文件" class="headerlink" title=".pro文件"></a>.pro文件</h2><p>在使用Qt向导生成的应用程序.pro文件格式如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">QT    +&#x3D; core gui &#x2F;&#x2F;包含的模块greaterThan(QT_MAJOR_VERSION, 4): QT +&#x3D; widgets &#x2F;&#x2F;大于Qt4版本 才包含widget模块TARGET &#x3D; QtFirst &#x2F;&#x2F;应用程序名 生成的.exe程序名称TEMPLATE &#x3D; app  &#x2F;&#x2F;模板类型  应用程序模板SOURCES +&#x3D; main.cpp\  &#x2F;&#x2F;源文件   mywidget.cppHEADERS +&#x3D; mywidget.h  &#x2F;&#x2F;头文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>.pro就是工程文件(project)，它是qmake自动生成的用于生产makefile的配置文件。.pro文件的写法如下：</p><ul><li><p>注释 从“#”开始，到这一行结束。</p></li><li><p>模板变量告诉qmake为这个应用程序生成哪种makefile,如TEMPLATE &#x3D; app</p><ul><li>app  建立一个应用程序的makefile。这是默认值，所以如果模板没有被指定，这个将被使用</li><li>lib  建立一个库的makefile</li><li>vcapp  建立一个应用程序的VisualStudio项目文件</li><li>vclib   建立一个库的VisualStudio项目文件</li><li>subdirs  这是一个特殊的模板，它可以创建一个能够进入特定目录并且为一个项目文件生成makefile并且为它调用make的makefile</li></ul></li><li><p>指定生成的应用程序名   TARGET &#x3D; QtFirst</p></li><li><p>工程中包含的头文件   HEADERS +&#x3D; include&#x2F;painter.h</p></li><li><p>工程中包含的.ui设计文件   FORMS +&#x3D; forms&#x2F;painter.ui</p></li><li><p>工程中包含的源文件   SOURCES +&#x3D; sources&#x2F;main.cpp sources</p></li><li><p>工程中包含的资源文件   RESOURCES +&#x3D; qrc&#x2F;painter.qrc</p></li><li><p>greaterThan(QT_MAJOR_VERSION, 4): QT +&#x3D; widgets</p><p>  这条语句的含义是，如果QT_MAJOR_VERSION大于4（也就是当前使用的Qt5及更高版本）需要增加widgets模块。如果项目仅需支持Qt5，也可以直接添加“QT +&#x3D; widgets”一句。不过为了保持代码兼容，最好还是按照QtCreator生成的语句编写。</p></li><li><p>配置信息</p><p>  CONFIG用来告诉qmake关于应用程序的配置信息。</p><p>  CONFIG +&#x3D; c++11  &#x2F;&#x2F;使用c++11的特性</p><p>  在这里使用“+&#x3D;”，是因为我们添加我们的配置选项到任何一个已经存在中。这样做比使用“&#x3D;”那样替换已经指定的所有选项更安全。</p></li></ul><h2 id="解析最简单Qt应用程序"><a href="#解析最简单Qt应用程序" class="headerlink" title="解析最简单Qt应用程序"></a>解析最简单Qt应用程序</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &quot;widget.h&quot;#include &lt;QApplication&gt;int main(int argc, char *argv[])&#123;    QApplication a(argc, argv);    Widget w;    w.show();    return a.exec();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>QApplication应用程序类</p><ul><li>管理图形用户界面应用程序的控制流和主要设置</li><li>是Qt的整个后台管理的命脉它包含<strong>主事件循环</strong>，在其中来自窗口系统和其它资源的所有事件处理和调度。它也处理应用程序的初始化和结束，并且提供<strong>对话管理</strong></li><li>对于任何一个使用Qt的图形用户界面应用程序，都<strong>正好存在一个QApplication 对象</strong>，而不论这个应用程序在同一时间内是不是有0、1、2或更多个窗口</li></ul></li><li><p>a.exec()</p><p>  <strong>程序进入消息循环</strong>，等待对用户输入进行响应。这里main()把控制权转交给Qt，Qt完成事件处理工作，当应用程序退出的时候exec()的值就会返回。在exec()中，Qt接受并处理用户和系统的事件并且把它们传递给适当的窗口部件。</p></li></ul><h2 id="对象模型（对象树）"><a href="#对象模型（对象树）" class="headerlink" title="对象模型（对象树）"></a>对象模型（对象树）</h2><p>在Qt中创建对象的时候会提供一个Parent对象指针，下面来解释这个parent到底是干什么的。</p><ul><li><p>QObject是以对象树的形式组织起来的</p><ul><li><p>当你创建一个QObject对象时，会看到QObject的构造函数接收一个QObject指针作为参数，这个参数就是 parent，也就是父对象指针。</p><p>  这相当于，<strong>在创建QObject对象时，可以提供一个其父对象，我们创建的这个QObject对象会自动添加到其父对象的children()列表</strong></p></li><li><p><strong>当父对象析构的时候，这个列表中的所有对象也会被析构。（注意，这里的父对象并不是继承意义上的父类！）</strong>这种机制在 GUI 程序设计中相当有用。例如，一个按钮有一个QShortcut（快捷键）对象作为其子对象。当我们删除按钮的时候，这个快捷键理应被删除。这是合理的。</p></li></ul></li><li><p>QWidget是能够在屏幕上显示的一切组件的父类</p><ul><li>QWidget继承自QObject，因此也继承了这种对象树关系。一个孩子自动地成为父组件的一个子组件。因此，它会显示在父组件的坐标系统中，被父组件的边界剪裁。例如，当用户关闭一个对话框的时候，应用程序将其删除，那么，我们希望属于这个对话框的按钮、图标等应该一起被删除。事实就是如此，因为这些都是对话框的子组件。</li><li>当然，<strong>我们也可以自己删除子对象，它们会自动从其父对象列表中删除。</strong>比如，当我们删除了一个工具栏时，其所在的主窗口会自动将该工具栏从其子对象列表中删除，并且自动调整屏幕显示</li></ul></li></ul><p><strong>在 Qt 中，尽量在构造的时候就指定 parent 对象，并且大胆在堆上创建</strong></p><h2 id="Qt窗口坐标体系"><a href="#Qt窗口坐标体系" class="headerlink" title="Qt窗口坐标体系"></a>Qt窗口坐标体系</h2><p><img src="https://cdn.jsdelivr.net/gh/lgds-01/picture/img/image-20210718154749947.png" alt="image-20210718154749947"></p><p>对于嵌套窗口，其坐标是<strong>相对于父窗口</strong>来说的</p><h2 id="信号和槽机制"><a href="#信号和槽机制" class="headerlink" title="信号和槽机制"></a>信号和槽机制</h2><p>信号槽，实际就是观察者模式。<strong>当某个事件发生之后</strong>，比如，按钮检测到自己被点击了一下，<strong>它就会发出一个信号（signal）</strong>。这种发出是没有目的的，类似广播。<strong>如果有对象对这个信号感兴趣，它就会使用连接（connect）函数</strong>，意思是，<strong>将想要处理的信号和自己的一个函数（称为槽（slot））绑定来处理这个信号</strong>。也就是说，<strong>当信号发出时，被连接的槽函数会自动被回调</strong>。这就类似观察者模式：当发生了感兴趣的事件，某一个操作就会被自动触发</p><p>connect()函数最常用的一般形式：<strong>connect(sender, signal, receiver, slot);</strong></p><ul><li><p>sender：发出信号的对象</p></li><li><p>signal：发送对象发出的信号</p></li><li><p>receiver：接收信号的对象</p></li><li><p>slot：接收对象在接收到信号之后所需要调用的函数（槽函数）</p></li></ul><p>自定义信号槽需要注意的事项：</p><ul><li><p>发送者和接收者都需要是QObject的子类（当然，槽函数是全局函数、Lambda 表达式等无需接收者的时候除外）</p></li><li><p><strong>信号和槽函数返回值是 void</strong></p></li><li><p><strong>信号只需要声明，不需要实现</strong></p></li><li><p><strong>槽函数需要声明也需要实现</strong></p></li><li><p>槽函数是普通的成员函数，作为成员函数，会受到 public、private、protected 的影响</p></li><li><p><strong>使用 emit 在恰当的位置发送信号</strong></p></li><li><p>使用connect()函数连接信号和槽</p></li><li><p>任何成员函数、static 函数、全局函数和 Lambda 表达式都可以作为槽函数</p></li><li><p><strong>信号槽要求信号和槽的参数一致，所谓一致，是参数类型一致</strong></p></li><li><p>如果信号和槽的参数不一致，允许的情况是，<strong>槽函数的参数可以比信号的少</strong>，即便如此，<strong>槽函数存在的那些参数的顺序也必须和信号的前面几个一致起来</strong>。这是因为，你可以在槽函数中选择忽略信号传来的数据（也就是槽函数的参数比信号的少）。</p></li><li><p><strong>一个信号可以和多个槽相连</strong></p><p>  如果是这种情况<strong>，</strong>这些槽会一个接一个的被调用，但是它们的调用顺序是不确定的</p></li><li><p><strong>一个信号可以和多个槽相连</strong></p><p> 如果是这种情况，这些槽会一个接一个的被调用，但是它们的调用顺序是不确定的</p></li><li><p><strong>一个信号可以连接到另外的一个信号</strong></p><p>  当第一个信号发出时，第二个信号被发出。除此之外，这种信号-信号的形式和信号-槽的形式没有什么区别</p></li><li><p>槽可以被取消链接</p><p> 这种情况并不经常出现，因为当一个对象delete之后，Qt自动取消所有连接到这个对象上面的槽</p></li><li><p><strong>信号槽可以断开</strong></p><p>  利用<strong>disconnect</strong>关键字是可以断开信号槽的</p></li></ul><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><p><strong>Lambda表达式</strong>用于定义并创建匿名的函数对象，以简化编程工作。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">[capture](parameters) mutable -&gt;return-type&#123;statement&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>[函数对象参数](操作符重载函数参数)mutable -&gt;返回值{函数体}</p><ul><li><p>函数对象参数；</p><p>  <strong>[]，标识一个Lambda的开始</strong>，这部分必须存在，不能省略。函数对象参数是传递给编译器自动生成的函数对象类的构造函数的。函数对象参数只能使用那些到定义Lambda为止时Lambda所在作用范围内可见的局部变量（包括Lambda所在类的this）。函数对象参数有以下形式：</p><ul><li>空。没有使用任何函数对象参数</li><li>&#x3D;。函数体内可以使用Lambda所在作用范围内<strong>所有可见的局部变量（包括Lambda所在类的this）</strong>，并且是<strong>值传递方式</strong>（相当于编译器自动为我们按值传递了所有局部变量）</li><li>&amp;。函数体内可以使用Lambda所在作用范围内<strong>所有可见的局部变量（包括Lambda所在类的this）</strong>，并且是<strong>引用传递方式</strong>（相当于编译器自动为我们按引用传递了所有局部变量）</li><li>this。函数体内可以使用Lambda所在类中的成员变量</li><li>a。将a按值进行传递。按值进行传递时，函数体内不能修改传递进来的a的拷贝，因为默认情况下函数是const的。<strong>要修改传递进来的a的拷贝</strong>，可以添加mutable修饰符</li><li>&amp;a。将a按引用进行传递</li><li>a, &amp;b。将a按值进行传递，b按引用进行传递</li><li>&#x3D;，&amp;a, &amp;b。除a和b按引用进行传递外，其他参数都按值进行传递</li><li>&amp;, a, b。除a和b按值进行传递外，其他参数都按引用进行传递</li></ul></li><li><p>操作符重载函数参数</p><p>  <strong>标识重载的()操作符的参数</strong>，没有参数时，这部分可以省略。参数可以通过按值（如：(a,b)）和按引用（如：(&amp;a,&amp;b)）两种方式进行传递</p></li><li><p>可修改标示符</p><p>  mutable声明，<strong>这部分可以省略</strong>。按值传递函数对象参数时，加上mutable修饰符后，可以<strong>修改按值传递进来的拷贝</strong>（注意是能修改拷贝，而不是值本身）</p></li><li><p>函数返回值</p><p>  -&gt;返回值类型，标识函数返回值的类型，<strong>当返回值为void，或者函数体中只有一处return的地方（此时编译器可以自动推断出返回值类型）时，这部分可以省略</strong></p></li><li><p>函数体</p><p>  {}，标识函数的实现，这部分不能省略，但<strong>函数体可以为空</strong></p></li></ul><h2 id="资源文件"><a href="#资源文件" class="headerlink" title="资源文件"></a>资源文件</h2><p>如果你的程序需要加载特定的资源（图标、文本翻译等），那么，将其放置在资源文件中，就再也不需要担心这些文件的丢失。也就是说，如果你将资源以资源文件形式存储，它是会<strong>编译到可执行文件内部</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/lgds-01/picture/img/clip_image002.jpg" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/lgds-01/picture/img/clip_image001.png" alt="img"></p><p>通过使用 : 开头的路径来找到这个文件。比如，我们的前缀是 &#x2F;images，文件是 document-open.png，那么就可以使用:&#x2F;images&#x2F;document-open.png找到这个文件。这么做带来的一个问题是，如果以后我们要更改文件名，比如将 docuemnt-open.png 改成 docopen.png，那么，所有使用了这个名字的路径都需要修改。所以，更好的办法是，我们给这个文件<strong>取一个“别名”，以后就以这个别名来引用这个文件</strong>。具体做法是，选中这个文件，添加别名信息：</p><p><img src="https://cdn.jsdelivr.net/gh/lgds-01/picture/img/clip_image002.png" alt="img"></p><p>这样，我们可以直接使用:&#x2F;images&#x2F;doc-open引用到这个资源，无需关心图片的真实文件名</p><h2 id="QMainWindow"><a href="#QMainWindow" class="headerlink" title="QMainWindow"></a>QMainWindow</h2><p>QMainWindow是一个为用户提供主窗口程序的类，包含<strong>一个菜单栏</strong>（menu bar）、多个工具栏(tool bars)、多个锚接部件(dock widgets)、<strong>一个状态栏</strong>(status bar)及<strong>一个中心部件</strong>(central widget)，是许多应用程序的基础，如文本编辑器，图片编辑器等</p><p><img src="https://cdn.jsdelivr.net/gh/lgds-01/picture/img/image-20210718162034592.png" alt="image-20210718162034592"></p><h3 id="菜单栏"><a href="#菜单栏" class="headerlink" title="菜单栏"></a>菜单栏</h3><p>一个主窗口最多只有一个菜单栏</p><ul><li><p>创建菜单栏，通过QMainWindow类的menubar（）函数获取主窗口菜单栏指针</p>  <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">QMenuBar *menuBar() const<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>创建菜单，调用QMenu的成员函数addMenu来添加菜单</p>  <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">QAction* addMenu(QMenu * menu)QMenu* addMenu(const QString &amp; title)QMenu* addMenu(const QIcon &amp; icon, const QString &amp; title)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>创建菜单项，调用QMenu的成员函数addAction来添加菜单项</p>  <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">QAction* activeAction() constQAction* addAction(const QString &amp; text)QAction* addAction(const QIcon &amp; icon, const QString &amp; text)QAction* addAction(const QString &amp; text, const QObject * receiver,const char * member, const QKeySequence &amp; shortcut &#x3D; 0)QAction* addAction(const QIcon &amp; icon, const QString &amp; text, const QObject * receiver, const char * member, const QKeySequence &amp; shortcut &#x3D; 0)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="https://cdn.jsdelivr.net/gh/lgds-01/picture/img/image-20210718163611945.png" alt="image-20210718163611945"></p></li></ul><pre class="line-numbers language-none"><code class="language-none">QMenuBar * bar &#x3D; MenuBar();setMenuBar( bar ) QMenu * fileMenu &#x3D; bar -&gt; addMenu(“文件”)   创建菜单QAction * newAction &#x3D;  fileMenu -&gt;addAction(“新建”); 创建菜单项fileMenu-&gt;addSeparator();  添加分割线 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="工具栏"><a href="#工具栏" class="headerlink" title="工具栏"></a>工具栏</h3><p>主窗口的工具栏上可以有多个工具条，通常采用一个菜单对应一个工具条的的方式，也可根据需要进行工具条的划分</p><ul><li>直接调用QMainWindow类的addToolBar（默认停靠区域， ToolBar*）函数获取主窗口的工具条对象，每增加一个工具条都需要调用一次该函数</li><li>插入属于工具条的动作，即在工具条上添加操作。通过QToolBar类的addAction函数添加</li><li>工具条是一个可移动的窗口，它的停靠区域由QToolBar的allowAreas决定，包括：<ul><li>Qt::LeftToolBarArea   停靠在左侧</li><li>Qt::RightToolBarArea   停靠在右侧</li><li>Qt::TopToolBarArea    停靠在顶部</li><li>Qt::BottomToolBarArea   停靠在底部</li><li>Qt::AllToolBarAreas   以上四个位置都可停靠</li></ul></li></ul><p>使用setAllowedAreas（）函数指定停靠区域：setAllowedAreas（Qt::LeftToolBarArea | Qt::RightToolBarArea）</p><p>使用setMoveable（）函数设定工具栏的可移动性：setMoveable（false）&#x2F;&#x2F;工具条不可移动, 只能停靠在初始化的位置上</p><h3 id="状态栏"><a href="#状态栏" class="headerlink" title="状态栏"></a>状态栏</h3><p>状态栏也只能最多有一个</p><p>QStatusBar类常用成员函数：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;添加小部件void addWidget(QWidget * widget, int stretch &#x3D; 0)&#x2F;&#x2F;插入小部件intinsertWidget(int index, QWidget * widget, int stretch &#x3D; 0)&#x2F;&#x2F;删除小部件void removeWidget(QWidget * widget)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="铆接部件"><a href="#铆接部件" class="headerlink" title="铆接部件"></a>铆接部件</h3><p>铆接部件 QDockWidget，也称浮动窗口，可以有多个</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">QDockWidget * dock &#x3D; new QDockWidget(&quot;标题&quot;,this);addDockWidget(Qt::LeftDockWidgetArea,dock);dock-&gt;setAllowedAreas(Qt::LeftDockWidgetArea | Qt::RightDockWidgetArea | Qt::TopDockWidgetArea);  设置区域范围<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="核心部件（中心部件）"><a href="#核心部件（中心部件）" class="headerlink" title="核心部件（中心部件）"></a>核心部件（中心部件）</h3><p><strong>除了以上几个部件，中心显示的部件都可以作为核心部件</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">QTextEdit * edit &#x3D; new QTextEdit(this);setCentralWidget(edit);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="QDialog"><a href="#QDialog" class="headerlink" title="QDialog"></a>QDialog</h2><p>Qt 中使用QDialog类实现对话框。就像主窗口一样，我们通常会设计一个类继承QDialog。QDialog（及其子类，以及所有Qt::Dialog类型的类）的对于其 parent 指针都有额外的解释：<strong>如果 parent 为 NULL，则该对话框会作为一个顶层窗口，否则则作为其父组件的子对话框（此时，其默认出现的位置是 parent 的中心）。顶层窗口与非顶层窗口的区别在于，顶层窗口在任务栏会有自己的位置，而非顶层窗口则会共享其父组件的位置。</strong></p><p>对话框分为模态对话框和非模态对话框</p><ul><li>模态对话框，就是会阻塞同一应用程序中其它窗口的输入。模态对话框很常见，比如“打开文件”功能。你可以尝试一下记事本的打开文件，当打开文件对话框出现时，我们是不能对除此对话框之外的窗口部分进行操作的。</li><li>与此相反的是非模态对话框，例如查找对话框，我们可以在显示着查找对话框的同时，继续对记事本的内容进行编辑。</li></ul><h3 id="标准对话框"><a href="#标准对话框" class="headerlink" title="标准对话框"></a>标准对话框</h3><p>所谓标准对话框，是 Qt 内置的一系列对话框，用于简化开发。</p><p>Qt 的内置对话框大致分为以下几类：</p><ul><li>QColorDialog：    选择颜色；</li><li><strong>QFileDialog：    选择文件或者目录；</strong></li><li>QFontDialog：    选择字体；</li><li><strong>QInputDialog：    允许用户输入一个值，并将其值返回；</strong></li><li><strong>QMessageBox：     模态对话框，用于显示信息、询问问题等；</strong></li><li>QPageSetupDialog：  为打印机提供纸张相关的选项；</li><li>QPrintDialog：    打印机配置；</li><li>QPrintPreviewDialog：打印预览；</li><li>QProgressDialog：  显示操作过程。</li></ul><h3 id="自定义消息框"><a href="#自定义消息框" class="headerlink" title="自定义消息框"></a>自定义消息框</h3><p>Qt 支持模态对话框和非模态对话框。</p><p>模态与非模态的实现：</p><ul><li>使用QDialog::exec()实现应用程序级别的模态对话框</li><li>使用QDialog::open()实现窗口级别的模态对话框</li><li>使用QDialog::show()实现非模态对话框</li></ul><h4 id="模态对话框"><a href="#模态对话框" class="headerlink" title="模态对话框"></a>模态对话框</h4><p>Qt 有两种级别的模态对话框：</p><ul><li><p>应用程序级别的模态</p><p>  当该种模态的对话框出现时，用户必须首先对对话框进行交互，直到关闭对话框，然后才能访问程序中其他的窗口。</p></li><li><p>窗口级别的模态</p><p>  该模态仅仅阻塞与对话框关联的窗口，但是依然允许用户与程序中其它窗口交互。窗口级别的模态尤其适用于多窗口模式。</p></li></ul><p>在下面的示例中，我们调用了exec()将对话框显示出来，因此这就是一个模态对话框。当对话框出现时，我们不能与主窗口进行任何交互，直到我们关闭了该对话框</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">QDialog dialog;dialog.setWindowTitle(tr(&quot;Hello, dialog!&quot;));dialog.exec();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="非模态对话框"><a href="#非模态对话框" class="headerlink" title="非模态对话框"></a>非模态对话框</h4><p>下面我们试着将exec()修改为show()，看看非模态对话框：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">QDialog dialog(this);dialog.setWindowTitle(tr(&quot;Hello, dialog!&quot;));dialog.show();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对话框竟然一闪而过！这是因为，<strong>show()函数不会阻塞当前线程，对话框会显示出来，然后函数立即返回，代码继续执行。</strong>注意，dialog 是建立在栈上的，show()函数返回，MainWindow::open()函数结束，dialog 超出作用域被析构，因此对话框消失了。知道了原因就好改了，我们将 dialog 改成堆上建立，当然就没有这个问题了：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">QDialog *dialog &#x3D; new QDialog;dialog-&gt;setWindowTitle(tr(&quot;Hello, dialog!&quot;));dialog-&gt;show();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当我们将主窗口作为 parent 时，主窗口不关闭，对话框就不会被销毁，所以会一直占用内存。在这种情景下，我们可以设置 dialog 的WindowAttribute：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">QDialog *dialog &#x3D; new QDialog;dialog-&gt;setAttribute(Qt::WA_DeleteOnClose);dialog-&gt;setWindowTitle(tr(&quot;Hello, dialog!&quot;));dialog-&gt;show();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>setAttribute()函数设置对话框关闭时，自动销毁对话框</strong></p><h3 id="消息对话框"><a href="#消息对话框" class="headerlink" title="消息对话框"></a>消息对话框</h3><p>QMessageBox用于显示消息提示。我们一般会使用其提供的几个 static 函数：</p><ul><li><p>显示关于对话框</p>  <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void about(QWidget * parent, const QString &amp; title, const QString &amp; text;&#x2F;&#x2F;这是一个最简单的对话框，其标题是 title，内容是 text，父窗口是 parent。对话框只有一个 OK 按钮。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>显示关于 Qt 对话框。该对话框用于显示有关 Qt 的信息</p>  <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void aboutQt(QWidget * parent, const QString &amp; title &#x3D; QString())：<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>显示严重错误对话框</p>  <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">StandardButton critical(QWidget * parent, const QString &amp; title, const QString &amp; text, StandardButtons buttons &#x3D; Ok, StandardButton defaultButton &#x3D; NoButton)：&#x2F;&#x2F;这个对话框将显示一个红色的错误符号。我们可以通过 buttons 参数指明其显示的按钮。默认情况下只有一个 Ok 按钮，我们可以使用StandardButtons类型指定多种按钮<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>显示信息对话框，与QMessageBox::critical()类似，不同之处在于这个对话框提供一个普通信息图标</p>  <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">StandardButton information(QWidget * parent, const QString &amp; title, const QString &amp; text, StandardButtons buttons &#x3D; Ok, StandardButton defaultButton &#x3D; NoButton)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>显示问题对话框，与QMessageBox::critical ()类似，不同之处在于这个对话框提供一个问号图标，并且其显示的按钮是“是”和“否”</p>  <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">StandardButton question(QWidget * parent,const QString &amp; title, const QString &amp; text, StandardButtons buttons &#x3D; StandardButtons( Yes | No ), StandardButton defaultButton &#x3D; NoButton) <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>显示警告对话框，与QMessageBox::critical()类似，不同之处在于这个对话框提供一个黄色叹号图标</p>  <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">StandardButton warning(QWidget * parent, const QString &amp; title, const QString &amp; text, StandardButtons buttons &#x3D; Ok, StandardButton defaultButton &#x3D; NoButton)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="布局管理器"><a href="#布局管理器" class="headerlink" title="布局管理器"></a>布局管理器</h2><p><strong>Qt 提供了两种组件定位机制：绝对定位和布局定位</strong></p><ul><li><p>绝对定位就是一种最原始的定位方法：<strong>给出这个组件的坐标和长宽值</strong></p><p>  这样做带来的一个问题是，如果用户改变了窗口大小，比如点击最大化按钮或者使用鼠标拖动窗口边缘，采用绝对定位的组件是不会有任何响应的。</p></li><li><p>布局定位：你只要把组件放入某一种布局，布局由专门的布局管理器进行管理。当需要调整大小或者位置的时候，Qt 使用对应的布局管理器进行调整</p></li></ul><p>Qt 提供的布局中以下三种是我们最常用的：</p><ul><li>QHBoxLayout：按照水平方向从左到右布局；</li><li>QVBoxLayout：按照竖直方向从上到下布局；</li><li>QGridLayout：在一个网格中进行布局，类似于 HTML 的 table</li></ul><p><strong>利用控件里的widget来做布局</strong>，在Containers中。在widget中的控件可以进行水平、垂直、栅格布局等操作，比较灵活。再布局的同时我们需要灵活运用弹簧的特性让我们的布局更加的美观</p><h2 id="常用控件"><a href="#常用控件" class="headerlink" title="常用控件"></a>常用控件</h2><h3 id="QLabel控件使用"><a href="#QLabel控件使用" class="headerlink" title="QLabel控件使用"></a>QLabel控件使用</h3><ul><li><p>显示文字 （普通文本、html）</p><p>  通过QLabel类的setText函数设置显示的内容:</p><p>  void  setText(const QString &amp;)</p><ul><li><p>可以显示普通文本字符串</p><p>  QLable *label &#x3D; new QLable;</p><p>  label-&gt;setText(“Hello, World!”);</p></li><li><p>可以显示HTML格式的字符串</p><p>  QLabel * label &#x3D; new QLabel(this);</p><p>  label -&gt;setText(“Hello, World”);</p><p>  label -&gt;setText(“<h1>&lt;a href&#x3D;&quot;<a href="https://www.baidu.com/&quot;&gt;%E7%99%BE%E5%BA%A6%E4%B8%80%E4%B8%8B">https://www.baidu.com\&quot;&gt;百度一下</a></a></h1>“);</p><p>  label -&gt;setOpenExternalLinks(true);</p><p>  其中setOpenExternalLinks()函数是用来设置用户点击链接之后是否自动打开链接，如果参数指定为true则会自动打开。</p></li></ul></li><li><p>显示图片</p><p>  可以使用QLabel的成员函数setPixmap设置图片</p><p>  void setPixmap(const QPixmap &amp;)</p><ul><li><p>首先定义QPixmap对象</p><p>  QPixmap pixmap;</p></li><li><p>然后加载图片</p><p>  pixmap.load(“:&#x2F;Image&#x2F;boat.jpg”);</p></li><li><p>最后将图片设置到QLabel中</p><p>  QLabel *label &#x3D; new QLabel;</p><p>  label.setPixmap(pixmap);</p></li></ul></li><li><p>显示动画</p><p>  可以使用QLabel 的成员函数setMovie加载动画，可以播放gif格式的文件</p><p>  void setMovie(QMovie * movie)</p><ul><li><p>首先定义QMovie对象，并初始化:</p><p>  QMovie *movie &#x3D; new QMovie(“:&#x2F;Mario.gif”);</p></li><li><p>播放加载的动画：</p><p>  movie-&gt;start();</p></li><li><p>将动画设置到QLabel中：</p><p>  QLabel *label &#x3D; new QLabel；</p><p>  label-&gt;setMovie(movie);</p></li></ul></li></ul><h3 id="QLineEdit"><a href="#QLineEdit" class="headerlink" title="QLineEdit"></a>QLineEdit</h3><p>Qt提供的单行文本编辑框</p><ul><li><p>设置&#x2F;获取内容</p><ul><li><p>获取编辑框内容使用text（），函数声明如下：</p><p>  QString   text() const</p></li><li><p>设置编辑框内容</p><p>  void setText(const QString &amp;)</p></li></ul></li><li><p>设置显示模式</p><p>  使用QLineEdit类的setEchoMode () 函数设置文本的显示模式,函数声明:</p><p>  void setEchoMode(EchoMode mode)</p><p>  EchoMode是一个枚举类型,一共定义了四种显示模式:</p><ul><li>QLineEdit::Normal  模式显示方式，按照输入的内容显示。</li><li>QLineEdit::NoEcho 不显示任何内容，此模式下无法看到用户的输入。</li><li>QLineEdit::Password 密码模式，输入的字符会根据平台转换为特殊字符。</li><li>QLineEdit::PasswordEchoOnEdit  编辑时显示字符否则显示字符作为密码。</li></ul></li></ul><h3 id="自定义控件"><a href="#自定义控件" class="headerlink" title="自定义控件"></a>自定义控件</h3><p>使用方法：打开Qt的.ui文件,因为SmallWidget是派生自Qwidget类,所以需要在ui文件中先放入一个QWidget控件, 然后再上边鼠标右键</p><p><img src="https://cdn.jsdelivr.net/gh/lgds-01/picture/img/image-20210718181601452.png" alt="image-20210718181601452"></p><p>弹出提升窗口部件对话框</p><p><img src="https://cdn.jsdelivr.net/gh/lgds-01/picture/img/image-20210718181618960.png" alt="image-20210718181618960"></p><p>添加之后,类名会显示到上边的列表框中,然后单击提升按钮,完成操作.我们可以看到, 这个窗口对应的类从原来的QWidget变成了SmallWidget，再次运行程序,这个widget_3中就能显示出我们自定义的窗口了</p><h2 id="Qt消息机制和事件"><a href="#Qt消息机制和事件" class="headerlink" title="Qt消息机制和事件"></a>Qt消息机制和事件</h2><p>Qt 程序需要在main()函数创建一个QApplication对象，然后调用它的exec()函数。这个函数就是开始 Qt 的事件循环。在执行exec()函数之后，程序将进入事件循环来监听应用程序的事件。当事件发生时，Qt 将创建一个事件对象。<strong>Qt 中所有事件类都继承于QEvent</strong>。在事件对象创建完毕后，Qt 将这个事件对象传递给QObject的event()函数。<strong>event()函数并不直接处理事件，而是按照事件对象的类型分派给特定的事件处理函数</strong></p><p>在所有组件的父类QWidget中，定义了很多事件处理的回调函数，这些函数都是 protected virtual 的，也就是说，我们可以在子类中重新实现这些函数。</p><p><strong>QWidget中有一个mouseTracking属性，该属性用于设置是否追踪鼠标。只有鼠标被追踪时，mouseMoveEvent()才会发出。如果mouseTracking是 false（默认），组件在至少一次鼠标点击之后，才能够被追踪，也就是能够发出mouseMoveEvent()事件。如果mouseTracking为 true，则mouseMoveEvent()直接可以被发出。</strong></p><h3 id="event（）"><a href="#event（）" class="headerlink" title="event（）"></a>event（）</h3><p><strong>event()函数主要用于事件的分发</strong>。所以，如果你希望在事件分发之前做一些操作，就可以重写这个event()函数</p><p>函数返回值是 bool 类型。</p><ul><li>如果传入的事件已被识别并且处理，则需要返回 true，否则返回 false。如果<strong>返回值是 true</strong>，那么 Qt 会认为这个事件已经处理完毕，<strong>不会再将这个事件发送给其它对象，</strong>而是会继续处理事件队列中的下一事件。</li><li>在event()函数中，调用事件对象的accept()和ignore()函数是没有作用的，不会影响到事件的传播</li></ul><p>我们可以通过使用<strong>QEvent::type()函数可以检查事件的实际类型</strong>，其返回值是QEvent::Type类型的枚举。我们处理过自己感兴趣的事件之后，可以直接返回 true，表示我们已经对此事件进行了处理；对于其它我们不关心的事件，则需要调用父类的event()函数继续转发，否则这个组件就只能处理我们定义的事件了。为了测试这一种情况，我们可以尝试下面的代码：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool CustomTextEdit::event(QEvent *e)&#123;   if (e-&gt;type() &#x3D;&#x3D; QEvent::KeyPress) &#123;        QKeyEvent *keyEvent &#x3D; static_cast&lt;QKeyEvent *&gt;(e);       if (keyEvent-&gt;key() &#x3D;&#x3D; Qt::Key_Tab) &#123;            qDebug() &lt;&lt; &quot;You press tab.&quot;;            return true;       &#125;    &#125;    return false;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="事件过滤器"><a href="#事件过滤器" class="headerlink" title="事件过滤器"></a>事件过滤器</h3><p>Qt 创建了QEvent事件对象之后，会调用QObject的event()函数处理事件的分发。显然，我们可以在event()函数中实现拦截的操作。由于event()函数是 protected 的，因此，需要继承已有类。<strong>如果组件很多，就需要重写很多个event()函数</strong>。这当然相当麻烦，更不用说重写event()函数还得小心一堆问题。好在 Qt 提供了另外一种机制来达到这一目的：事件过滤器。</p><p>QObject有一个eventFilter()函数，用于建立事件过滤器。函数原型如下：</p><p><strong>virtual bool QObject::eventFilter ( QObject * watched, QEvent * event );</strong></p><p>事件过滤器会检查接收到的事件。如果这个事件是我们感兴趣的类型，就进行我们自己的处理；如果不是，就继续转发。这个函数返回一个 bool 类型，如果你想将参数 event 过滤出来，比如，<strong>不想让它继续转发，就返回 true，否则返回 false。</strong></p><p>事件过滤器的调用时间是目标对象（也就是参数里面的watched对象）接收到事件对象之前。也就是说，如果你在事件过滤器中停止了某个事件，那么，watched对象以及以后所有的事件过滤器根本不会知道这么一个事件。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool MainWindow::eventFilter(QObject *obj, QEvent *event) &#123;     if (obj &#x3D;&#x3D; textEdit) &#123;         if (event-&gt;type() &#x3D;&#x3D; QEvent::KeyPress) &#123;             QKeyEvent *keyEvent &#x3D; static_cast&lt;QKeyEvent *&gt;(event);             qDebug() &lt;&lt; &quot;Ate key press&quot; &lt;&lt; keyEvent-&gt;key();             return true;         &#125; else &#123;             return false;         &#125;     &#125; else &#123;         &#x2F;&#x2F; pass the event on to the parent class         return QMainWindow::eventFilter(obj, event);     &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>MainWindow是我们定义的一个类。我们重写了它的eventFilter()函数。为了过滤特定组件上的事件，首先需要判断这个对象是不是我们感兴趣的组件，然后判断这个事件的类型。在上面的代码中，我们不想让textEdit组件处理键盘按下的事件。所以，首先我们找到这个组件，<strong>如果这个事件是键盘事件，则直接返回 true，也就是过滤掉了这个事件，其他事件还是要继续处理，所以返回 false。对于其它的组件，我们并不保证是不是还有过滤器，于是最保险的办法是调用父类的函数。</strong></p></li><li><p>eventFilter()函数相当于创建了过滤器，然后我们需要安装这个过滤器。安装过滤器需要调用QObject::installEventFilter()函数。函数的原型如下：</p><p>  void QObject::installEventFilter ( QObject * filterObj )</p><p>  这个函数接受一个QObject *类型的参数。记得刚刚我们说的，eventFilter()函数是QObject的一个成员函数，因此，<strong>任意QObject都可以作为事件过滤器</strong>（问题在于，<strong>如果你没有重写eventFilter()函数，这个事件过滤器是没有任何作用的</strong>，因为默认什么都不会过滤）。已经存在的过滤器则可以通过QObject::removeEventFilter()函数移除。</p></li><li><p>我们可以向一个对象上面安装多个事件处理器，只要<strong>调用多次installEventFilter()函数</strong>。如果一个对象存在多个事件过滤器，那么，最后一个安装的会第一个执行，也就是<strong>后进先执行</strong>的顺序</p></li></ul><h2 id="绘图和绘图设备"><a href="#绘图和绘图设备" class="headerlink" title="绘图和绘图设备"></a>绘图和绘图设备</h2><p>Qt 的绘图系统允许使用相同的 API 在屏幕和其它打印设备上进行绘制。整个绘图系统基于QPainter，QPainterDevice和QPaintEngine三个类。</p><h3 id="QPainter"><a href="#QPainter" class="headerlink" title="QPainter"></a>QPainter</h3><p>Qt 的绘图系统实际上是，使用QPainter在QPainterDevice上进行绘制，它们之间使用QPaintEngine进行通讯（也就是翻译QPainter的指令）</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">PaintedWidget::PaintedWidget(QWidget *parent) :    QWidget(parent)&#123;    resize(800, 600);    setWindowTitle(tr(&quot;Paint Demo&quot;));&#125;PaintedWidget::PaintedWidget(QWidget *parent) : QWidget(parent)&#123;    resize(800, 600);    setWindowTitle(tr(&quot;Paint Demo&quot;));&#125;void PaintedWidget::paintEvent(QPaintEvent *)&#123;    QPainter painter(this);    painter.drawLine(80, 100, 650, 500);    painter.setPen(Qt::red);    painter.drawRect(10, 10, 100, 400);    painter.setPen(QPen(Qt::green, 5));    painter.setBrush(Qt::blue);    painter.drawEllipse(50, 150, 400, 200);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="绘图设备"><a href="#绘图设备" class="headerlink" title="绘图设备"></a>绘图设备</h3><p>绘图设备是指继承QPainterDevice的子类</p><ul><li>QPixmap专门为图像在屏幕上的显示做了优化</li><li>QBitmap是QPixmap的一个子类，它的色深限定为1，可以使用 QPixmap的isQBitmap()函数来确定这个QPixmap是不是一个QBitmap</li><li>QImage专门为图像的像素级访问做了优化</li><li>QPicture则可以记录和重现QPainter的各条命令</li></ul><h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><h3 id="基本文件操作"><a href="#基本文件操作" class="headerlink" title="基本文件操作"></a>基本文件操作</h3><p><strong>QFile提供了从文件中读取和写入数据的能力</strong>,<strong>将文件路径作为参数传给QFile的构造函数。不过也可以在创建好对象最后，使用setFileName()来修改</strong></p><p><strong>可以使用QDataStream或QTextStream类来读写文件，也可以使用QIODevice类提供的read()、readLine()、readAll()以及write()这样的函数。</strong>值得注意的是，<strong>有关文件本身的信息，比如文件名、文件所在目录的名字等，则是通过QFileInfo获取</strong></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int main(int argc, char *argv[])&#123;    QApplication app(argc, argv);     QFile file(&quot;in.txt&quot;);    if (!file.open(QIODevice::ReadOnly | QIODevice::Text)) &#123;        qDebug() &lt;&lt; &quot;Open file failed.&quot;;        return -1;    &#125; else &#123;        while (!file.atEnd()) &#123;            qDebug() &lt;&lt; file.readLine();        &#125;    &#125;     QFileInfo info(file);    qDebug() &lt;&lt; info.isDir();    qDebug() &lt;&lt; info.isExecutable();    qDebug() &lt;&lt; info.baseName();    qDebug() &lt;&lt; info.completeBaseName();    qDebug() &lt;&lt; info.suffix();    qDebug() &lt;&lt; info.completeSuffix();     return app.exec();&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>可以使用QFileInfo获取有关该文件的信息。</p><p>  QFileInfo有很多类型的函数，我们只举出一些例子。比如：</p><ul><li>isDir()检查该文件是否是目录；</li><li>isExecutable()  检查该文件是否是可执行文件等。</li><li>baseName()  可以直接获得文件名；</li><li>completeBaseName()  获取完整的文件名</li><li>suffix()  则直接获取文件后缀名。</li><li>completeSuffix()  获取完整的文件后缀</li></ul><p>  由下面的示例看到，baseName()和completeBaseName()，以及suffix()和completeSuffix()的区别：</p>  <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">QFileInfo fi(&quot;&#x2F;tmp&#x2F;archive.tar.gz&quot;);QString base  &#x3D; fi.baseName();  &#x2F;&#x2F; base &#x3D; &quot;archive&quot;QString base  &#x3D; fi.completeBaseName();  &#x2F;&#x2F; base &#x3D; &quot;archive.tar&quot;QString ext   &#x3D; fi.suffix();  &#x2F;&#x2F; ext &#x3D; &quot;gz&quot;QString ext   &#x3D; fi.completeSuffix();  &#x2F;&#x2F; ext &#x3D; &quot;tar.gz&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3 id="二进制文件读写"><a href="#二进制文件读写" class="headerlink" title="二进制文件读写"></a>二进制文件读写</h3><p><strong>QDataStream</strong>提供了基于QIODevice的二进制数据的序列化，可以直接读写没有编码的二进制数据，例如图像、视频、音频等。</p><p>QDataStream既能够存取 C++ 基本类型，如 int、char、short 等，也可以存取复杂的数据类型，例如自定义的类。实际上，QDataStream对于类的存储，是将复杂的类分割为很多基本单元实现的。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">QFile file(&quot;file.dat&quot;);file.open(QIODevice::WriteOnly);QDataStream out(&amp;file);out &lt;&lt; QString(&quot;the answer is&quot;);out &lt;&lt; (qint32)42;file.close(); <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接下来我们将存储到文件中的答案取出来</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">QFile file(&quot;file.dat&quot;);file.open(QIODevice::ReadOnly);QDataStream in(&amp;file);QString str;qint32 a;in &gt;&gt; str &gt;&gt; a;file.close(); <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>必须按照写入的顺序，将数据读取出来。顺序颠倒的话，程序行为是不确定的，严重时会直接造成程序崩溃</strong></p><h3 id="文本文件读写"><a href="#文本文件读写" class="headerlink" title="文本文件读写"></a>文本文件读写</h3><p>QTextStream使用 16 位的QChar作为基础的数据存储单位，同样，它也支持 C++ 标准类型，如 int 等。实际上，这是将这种标准类型与字符串进行了相互转换</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">QFile data(&quot;file.txt&quot;);if (data.open(QFile::WriteOnly | QIODevice::Truncate)) &#123;    QTextStream out(&amp;data);    out &lt;&lt; &quot;The answer is &quot; &lt;&lt; 42;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>当使用QDataStream写入的时候，实际上会在要写入的内容前面，额外添加一个这段内容的长度值。而以文本形式写入数据，是没有数据之间的分隔的</strong></p><p>使用文本文件时，很少会将其分割开来读取，而是使用诸如使用：</p><ul><li><p>QTextStream::readLine() 读取一行</p></li><li><p>QTextStream::readAll()读取所有文本</p></li></ul><p>默认情况下，QTextStream的编码格式是 Unicode，如果我们需要使用另外的编码，可以使用：**stream.setCodec(“UTF-8”);**进行设置。</p>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区间dp</title>
      <link href="/qu-jian-dp/2021/01/14/"/>
      <url>/qu-jian-dp/2021/01/14/</url>
      
        <content type="html"><![CDATA[<h1 id="区间dp"><a href="#区间dp" class="headerlink" title="区间dp"></a>区间dp</h1><h2 id="合并相邻石子"><a href="#合并相邻石子" class="headerlink" title="合并相邻石子"></a>合并相邻石子</h2><blockquote><p>一条直线上摆放着一行共n堆的石子。现要将石子有序地合并成一堆。规定每次只能选相邻的两堆合并成新的一堆，并将新的一堆石子数记为该次合并的得分。</p><p>请计算出将n堆石子合并成一堆的最小得分。</p></blockquote><p>dp数组含义：[i,j]内石子合并成一堆的最小的得分为dp[i][j]</p><p>代码模版：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt;sum(n+1,0);for(int i&#x3D;1;i&lt;&#x3D;n;i++)sum[i]&#x3D;sum[i-1]+stones[i-1];vector&lt;vector&lt;int&gt;&gt;dp(n,vector&lt;int&gt;(n,0));for(int len&#x3D;1;len&lt;n;len++)&#123;  for(int i&#x3D;0;i&lt;n-len;i++)&#123;    int j&#x3D;i+len;    dp[i][j]&#x3D;INF;    for(int k&#x3D;i;k&lt;j;k++)&#123;      dp[i][j]&#x3D;min(dp[i][j],dp[i][k]+dp[k+1][j]+sum[j+1]-sum[i]);    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>利用平行四边形原理优化后：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;int&gt;sum(n+1,0);for(int i&#x3D;1;i&lt;&#x3D;n;i++)sum[i]&#x3D;sum[i-1]+stones[i-1];vector&lt;vector&lt;int&gt;&gt;dp(n,vector&lt;int&gt;(n,0));vector&lt;vector&lt;int&gt;&gt;s(n,vector&lt;int&gt;(n,0));for(int i&#x3D;0;i&lt;n;i++)s[i][i]&#x3D;i;for(int len&#x3D;1;len&lt;n;len++)&#123;  for(int i&#x3D;0;i&lt;n-len;i++)&#123;    int j&#x3D;i+len;    dp[i][j]&#x3D;INF;    for(int k&#x3D;s[i][j-1];k&lt;s[i+1][j];k++)&#123;      if(dp[i][j]&gt;dp[i][k]+dp[k+1][j]+sum[j+1]-sum[i])&#123;      dp[i][j]&#x3D;dp[i][k]+dp[k+1][j]+sum[j+1]-sum[i];      s[i][j]&#x3D;k;      &#125;    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>子序列问题</title>
      <link href="/zi-xu-lie-wen-ti/2021/01/13/"/>
      <url>/zi-xu-lie-wen-ti/2021/01/13/</url>
      
        <content type="html"><![CDATA[<h2 id="子序列问题"><a href="#子序列问题" class="headerlink" title="子序列问题"></a>子序列问题</h2><h3 id="一、最长递增子序列"><a href="#一、最长递增子序列" class="headerlink" title="一、最长递增子序列"></a>一、最长递增子序列</h3><blockquote><p>给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。子序列是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序</p></blockquote><p>dp数组含义：dp[i]表示包含i在内的i之前的序列中最长递增子序列长度</p><p>代码模板：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">dp[0]&#x3D;1;int ans&#x3D;0;for(int i&#x3D;1;i&lt;nums.size();i++)&#123;    for(int j&#x3D;0;j&lt;i;j++)&#123;        if(nums[j]&lt;nums[i])&#123;            dp[i]&#x3D;max(dp[i],dp[j]+1);        &#125;    &#125;    ans&#x3D;max(ans,dp[i]);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、最长连续递增子序列"><a href="#二、最长连续递增子序列" class="headerlink" title="二、最长连续递增子序列"></a>二、最长连续递增子序列</h3><blockquote><p>给定一个未经排序的整数数组，找到最长且 连续递增的子序列，并返回该序列的长度。</p><p>连续递增的子序列 可以由两个下标 l 和 r（l &lt; r）确定，如果对于每个 l &lt;&#x3D; i &lt; r，都有 nums[i] &lt; nums[i + 1] ，那么子序列 [nums[l], nums[l + 1], …, nums[r - 1], nums[r]] 就是连续递增子序列。</p></blockquote><p>dp数组含义：dp[i]表示包含i在内的i之前的序列中最长连续递增子序列长度</p><p>代码模板：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">dp[0]&#x3D;1;int ans&#x3D;0;for(int i&#x3D;1;i&lt;nums.size();i++)&#123;    if(nums[i]&gt;nums[i-1])dp[i]&#x3D;dp[i-1]+1;    else dp[i]&#x3D;1;    ans&#x3D;max(ans,dp[i]);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、最长公共子串"><a href="#三、最长公共子串" class="headerlink" title="三、最长公共子串"></a>三、最长公共子串</h3><blockquote><p>给两个整数数组 A 和 B ，返回两个数组中公共的、长度最长的子数组的长度</p></blockquote><p>dp数组含义：dp[i][j]表示，A中0…i-1，B中0…j-1，二者最长公共子串长度</p><p>代码模板：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;vector&lt;int&gt;&gt;dp(A.size()+1,vector&lt;int&gt;(B.size()+1,0));ans&#x3D;0;for(int i&#x3D;1;i&lt;&#x3D;A.size();i++)&#123;    for(int j&#x3D;1;j&lt;&#x3D;B.size();j++)&#123;        if(A[i-1]&#x3D;&#x3D;B[j-1])dp[i][j]&#x3D;dp[i-1][j-1]+1;        ans&#x3D;max(ans,dp[i][j]);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、最长公共子序列"><a href="#四、最长公共子序列" class="headerlink" title="四、最长公共子序列"></a>四、最长公共子序列</h3><blockquote><p>给定两个字符串 text1 和 text2，返回这两个字符串的最长公共子序列的长度。</p><p>一个字符串的子序列 是指这样一个新的字符串：它是由原字符串在不改变字符的相对顺序的情况下删除某些字符（也可以不删除任何字符）后组成的新字符串。</p></blockquote><p>dp数组含义：dp[i][j]表示，text1中0…i-1，text2中0…j-1，二者最长公共子序列长度</p><p>代码模板：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;vector&lt;int&gt;&gt;dp(text1.size()+1,vector&lt;int&gt;(text2.size()+1,0));for(int i&#x3D;1;i&lt;text1.size();i++)&#123;    for(int j&#x3D;1;j&lt;text2.size();j++)&#123;        if(text1[i]&#x3D;&#x3D;text2[j])dp[i][j]&#x3D;dp[i-1][j-1]+1;        else dp[i][j]&#x3D;max(dp[i-1][j],dp[i][j-1]);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="五、回文子串"><a href="#五、回文子串" class="headerlink" title="五、回文子串"></a>五、回文子串</h3><blockquote><p>给定一个字符串，你的任务是计算这个字符串中有多少个回文子串。</p><p>具有不同开始位置或结束位置的子串，即使是由相同的字符组成，也会被视作不同的子串。</p></blockquote><p>dp数组含义：dp[i][j]表示，在i-j区间内的子串是否是回文子串</p><p>代码模板：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;vector&lt;bool&gt;&gt;dp(s.size(),vector&lt;bool&gt;(s.size(),0));int ans&#x3D;0;for(int i&#x3D;s.size()-1;i&gt;&#x3D;0;i--)&#123;    for(int j&#x3D;i;j&lt;s.size();j++)&#123;        if(s[i]&#x3D;&#x3D;s[j])&#123;            if(j-i&lt;&#x3D;1)&#123;                dp[i][j]&#x3D;true;                ans++;            &#125;else if(dp[i+1][j-1])&#123;                dp[i][j]&#x3D;true;                ans++;            &#125;        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="六、最长回文子序列"><a href="#六、最长回文子序列" class="headerlink" title="六、最长回文子序列"></a>六、最长回文子序列</h3><blockquote><p>给定一个字符串 s ，找到其中最长的回文子序列，并返回该序列的长度。</p></blockquote><p>dp数组含义：字符串s在[i, j]范围内最长的回文子序列的长度为dp[i][j]</p><p>代码模板：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;vector&lt;int&gt;&gt;dp(s.size(),vector&lt;int&gt;(s.size(),0));for(int i&#x3D;0;i&lt;s.size();i++)dp[i][i]&#x3D;1;for(int i&#x3D;s.size()-1;i&gt;&#x3D;0;i--)&#123;for(int j&#x3D;i+1;j&lt;s.size();j++)&#123;        if(s[i]&#x3D;&#x3D;s[j])dp[i][j]&#x3D;dp[i+1][j-1]+2;        else dp[i][j]&#x3D;max(dp[i+1][j],dp[i][j-1]);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="七、最长回文子串"><a href="#七、最长回文子串" class="headerlink" title="七、最长回文子串"></a>七、最长回文子串</h3><blockquote><p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p></blockquote><p>dp数组含义：字符串s在[i,j]范围内是否是回文子串</p><p>代码模板：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">vector&lt;vector&lt;bool&gt;&gt;dp(s.size(),vector&lt;bool&gt;(s.size(),0));for(int i&#x3D;0;i&lt;s.size();i++)dp[i][i]&#x3D;true;int start&#x3D;0;int len&#x3D;1;for(int i&#x3D;s.size()-1;i&gt;&#x3D;0;i--)&#123;    for(int j&#x3D;i+1;j&lt;s.size();j++)&#123;        if(s[i]&#x3D;&#x3D;s[j]&amp;&amp;(j-i&lt;&#x3D;1||dp[i+1][j-1]))&#123;            dp[i][j]&#x3D;true;            if(j-i+1&gt;&#x3D;len)&#123;                len&#x3D;j-i+1;                start&#x3D;i;            &#125;        &#125;    &#125;&#125;return s.substr(start,len);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> algorithm </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
